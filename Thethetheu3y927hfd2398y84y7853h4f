-- Roblox UI Library by Claude
-- Inspired by Splix and GameSense

local Library = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Configuration
local Config = {
    MainColor = Color3.fromRGB(35, 35, 35),
    AccentColor = Color3.fromRGB(0, 170, 255),
    TextColor = Color3.fromRGB(255, 255, 255),
    SubTextColor = Color3.fromRGB(175, 175, 175),
    BackgroundColor = Color3.fromRGB(25, 25, 25),
    OutlineColor = Color3.fromRGB(50, 50, 50),
    BorderColor = Color3.fromRGB(60, 60, 60),
    FontSize = Enum.FontSize.Size14,
    Font = Enum.Font.Gotham
}

-- Utility functions
local Utility = {}

function Utility:Create(class, properties)
    local instance = Instance.new(class)
    
    for property, value in pairs(properties) do
        instance[property] = value
    end
    
    return instance
end

function Utility:Tween(instance, properties, duration, ...)
    local tween = TweenService:Create(instance, TweenInfo.new(duration, ...), properties)
    tween:Play()
    return tween
end

function Utility:Ripple(parent, startPosition)
    local ripple = Utility:Create("Frame", {
        Name = "Ripple",
        Parent = parent,
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.7,
        BorderSizePixel = 0,
        Position = UDim2.new(0, startPosition.X - parent.AbsolutePosition.X, 0, startPosition.Y - parent.AbsolutePosition.Y),
        Size = UDim2.new(0, 0, 0, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        ZIndex = 5
    })
    
    local corner = Utility:Create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = ripple
    })
    
    local maxSize = math.max(parent.AbsoluteSize.X, parent.AbsoluteSize.Y) * 2
    
    Utility:Tween(ripple, {Size = UDim2.new(0, maxSize, 0, maxSize), BackgroundTransparency = 1}, 0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
    
    task.delay(0.5, function()
        ripple:Destroy()
    end)
end

function Utility:DraggableWindow(frame)
    local dragging, dragInput, dragStart, startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Create Main UI
function Library:CreateWindow(title)
    local WindowName = title or "UI Library"
    local MinimizedWindow = false
    
    -- Create main screen gui
    local ScreenGui = Utility:Create("ScreenGui", {
        Name = title .. "_UI",
        Parent = CoreGui,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    
    -- Create main frame
    local Main = Utility:Create("Frame", {
        Name = "Main",
        Parent = ScreenGui,
        BackgroundColor3 = Config.BackgroundColor,
        BorderColor3 = Config.BorderColor,
        BorderSizePixel = 1,
        Position = UDim2.new(0.5, -300, 0.5, -175),
        Size = UDim2.new(0, 600, 0, 350),
        ClipsDescendants = true
    })
    
    -- Make window draggable
    Utility:DraggableWindow(Main)
    
    -- Create top bar
    local TopBar = Utility:Create("Frame", {
        Name = "TopBar",
        Parent = Main,
        BackgroundColor3 = Config.MainColor,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 30)
    })
    
    -- Add title
    local TitleLabel = Utility:Create("TextLabel", {
        Name = "Title",
        Parent = TopBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(0.5, 0, 1, 0),
        Font = Config.Font,
        Text = WindowName,
        TextColor3 = Config.TextColor,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Add minimize button
    local MinimizeButton = Utility:Create("TextButton", {
        Name = "Minimize",
        Parent = TopBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -60, 0, 0),
        Size = UDim2.new(0, 30, 1, 0),
        Font = Config.Font,
        Text = "-",
        TextColor3 = Config.TextColor,
        TextSize = 20
    })
    
    -- Add close button
    local CloseButton = Utility:Create("TextButton", {
        Name = "Close",
        Parent = TopBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -30, 0, 0),
        Size = UDim2.new(0, 30, 1, 0),
        Font = Config.Font,
        Text = "Ã—",
        TextColor3 = Config.TextColor,
        TextSize = 20
    })
    
    -- Create tab container
    local TabContainer = Utility:Create("Frame", {
        Name = "TabContainer",
        Parent = Main,
        BackgroundColor3 = Config.MainColor,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 30),
        Size = UDim2.new(1, 0, 0, 30)
    })
    
    -- Create tab content container
    local TabContentContainer = Utility:Create("Frame", {
        Name = "TabContentContainer",
        Parent = Main,
        BackgroundColor3 = Config.BackgroundColor,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 60),
        Size = UDim2.new(1, 0, 1, -60),
        ClipsDescendants = true
    })
    
    -- Create fade effect for tabs
    local FadeEffect = Utility:Create("Frame", {
        Name = "FadeEffect",
        Parent = TabContainer,
        BackgroundColor3 = Config.MainColor,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, 0),
        Size = UDim2.new(1, 0, 0, 20),
        ZIndex = 5
    })
    
    local FadeGradient = Utility:Create("UIGradient", {
        Parent = FadeEffect,
        Transparency = NumberSequence.new({
            NumberSequenceKeypoint.new(0, 0),
            NumberSequenceKeypoint.new(1, 1)
        }),
        Rotation = 90
    })
    
    -- Create tab system
    local TabSystem = {}
    local Tabs = {}
    local SelectedTab = nil
    local TabCount = 0
    
    -- Close button functionality
    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)
    
    -- Minimize button functionality
    MinimizeButton.MouseButton1Click:Connect(function()
        MinimizedWindow = not MinimizedWindow
        
        if MinimizedWindow then
            Utility:Tween(Main, {Size = UDim2.new(0, 600, 0, 30)}, 0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
        else
            Utility:Tween(Main, {Size = UDim2.new(0, 600, 0, 350)}, 0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
        end
    end)
    
    -- Create tabs
    function TabSystem:CreateTab(tabName)
        TabCount = TabCount + 1
        local TabButton = Utility:Create("TextButton", {
            Name = tabName,
            Parent = TabContainer,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, (#Tabs * 100), 0, 0),
            Size = UDim2.new(0, 100, 1, 0),
            Font = Config.Font,
            Text = tabName,
            TextColor3 = Config.SubTextColor,
            TextSize = 14
        })
        
        local TabContentFrame = Utility:Create("ScrollingFrame", {
            Name = tabName .. "Content",
            Parent = TabContentContainer,
            BackgroundColor3 = Config.BackgroundColor,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(1, 0, 1, 0),
            ScrollBarThickness = 3,
            ScrollBarImageColor3 = Config.AccentColor,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            Visible = false
        })
        
        -- Add automatic canvas size adjustment
        local UIListLayout = Utility:Create("UIListLayout", {
            Parent = TabContentFrame,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 5)
        })
        
        local UIPadding = Utility:Create("UIPadding", {
            Parent = TabContentFrame,
            PaddingLeft = UDim.new(0, 10),
            PaddingRight = UDim.new(0, 10),
            PaddingTop = UDim.new(0, 10),
            PaddingBottom = UDim.new(0, 10)
        })
        
        UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabContentFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 20)
        end)
        
        local Tab = {
            Button = TabButton,
            Container = TabContentFrame
        }
        
        table.insert(Tabs, Tab)
        
        -- Tab selection
        TabButton.MouseButton1Click:Connect(function()
            if SelectedTab ~= Tab then
                TabSystem:SelectTab(Tab)
            end
        end)
        
        -- Select first tab by default
        if TabCount == 1 then
            TabSystem:SelectTab(Tab)
        end
        
        -- Tab Building Functions
        local TabFunctions = {}
        
        -- Section Builder
        function TabFunctions:CreateSection(sectionName)
            local SectionHolder = Utility:Create("Frame", {
                Name = sectionName .. "Section",
                Parent = TabContentFrame,
                BackgroundColor3 = Config.MainColor,
                BorderColor3 = Config.OutlineColor,
                BorderSizePixel = 1,
                Size = UDim2.new(1, 0, 0, 36),
                ClipsDescendants = true,
                AutomaticSize = Enum.AutomaticSize.Y
            })
            
            local SectionTitle = Utility:Create("TextLabel", {
                Name = "Title",
                Parent = SectionHolder,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 8, 0, 0),
                Size = UDim2.new(1, -16, 0, 30),
                Font = Config.Font,
                Text = sectionName,
                TextColor3 = Config.TextColor,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local SectionContainer = Utility:Create("Frame", {
                Name = "Container",
                Parent = SectionHolder,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 30),
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y
            })
            
            local ItemLayout = Utility:Create("UIListLayout", {
                Parent = SectionContainer,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 5)
            })
            
            local SectionPadding = Utility:Create("UIPadding", {
                Parent = SectionContainer,
                PaddingLeft = UDim.new(0, 5),
                PaddingRight = UDim.new(0, 5),
                PaddingBottom = UDim.new(0, 5)
            })
            
            ItemLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                SectionContainer.Size = UDim2.new(1, 0, 0, ItemLayout.AbsoluteContentSize.Y + 5)
            end)
            
            local SectionFunctions = {}
            
            -- Button
            function SectionFunctions:AddButton(buttonText, callback)
                callback = callback or function() end
                
                local ButtonHolder = Utility:Create("Frame", {
                    Name = buttonText .. "Button",
                    Parent = SectionContainer,
                    BackgroundColor3 = Config.OutlineColor,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, 30)
                })
                
                local ButtonCorner = Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = ButtonHolder
                })
                
                local Button = Utility:Create("TextButton", {
                    Name = "Button",
                    Parent = ButtonHolder,
                    BackgroundColor3 = Config.MainColor,
                    Position = UDim2.new(0, 1, 0, 1),
                    Size = UDim2.new(1, -2, 1, -2),
                    AutoButtonColor = false,
                    Font = Config.Font,
                    Text = buttonText,
                    TextColor3 = Config.TextColor,
                    TextSize = 14,
                    ClipsDescendants = true
                })
                
                local ButtonCorner2 = Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = Button
                })
                
                Button.MouseButton1Click:Connect(function()
                    Utility:Ripple(Button, Mouse.X, Mouse.Y)
                    callback()
                end)
                
                Button.MouseEnter:Connect(function()
                    Utility:Tween(Button, {BackgroundColor3 = Color3.fromRGB(45, 45, 45)}, 0.2)
                end)
                
                Button.MouseLeave:Connect(function()
                    Utility:Tween(Button, {BackgroundColor3 = Config.MainColor}, 0.2)
                end)
                
                return Button
            end
            
            -- Toggle
            function SectionFunctions:AddToggle(toggleText, default, callback)
                default = default or false
                callback = callback or function() end
                
                local ToggleValue = default
                
                local ToggleHolder = Utility:Create("Frame", {
                    Name = toggleText .. "Toggle",
                    Parent = SectionContainer,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 30)
                })
                
                local ToggleLabel = Utility:Create("TextLabel", {
                    Name = "Label",
                    Parent = ToggleHolder,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 5, 0, 0),
                    Size = UDim2.new(1, -50, 1, 0),
                    Font = Config.Font,
                    Text = toggleText,
                    TextColor3 = Config.TextColor,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local ToggleOuter = Utility:Create("Frame", {
                    Name = "ToggleOuter",
                    Parent = ToggleHolder,
                    BackgroundColor3 = Config.OutlineColor,
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, -40, 0.5, -10),
                    Size = UDim2.new(0, 40, 0, 20)
                })
                
                local ToggleOuterCorner = Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 10),
                    Parent = ToggleOuter
                })
                
                local ToggleInner = Utility:Create("Frame", {
                    Name = "ToggleInner",
                    Parent = ToggleOuter,
                    BackgroundColor3 = Config.MainColor,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 2, 0, 2),
                    Size = UDim2.new(0, 16, 0, 16)
                })
                
                local ToggleInnerCorner = Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 10),
                    Parent = ToggleInner
                })
                
                local function UpdateToggle()
                    if ToggleValue then
                        Utility:Tween(ToggleInner, {BackgroundColor3 = Config.AccentColor, Position = UDim2.new(0, 22, 0, 2)}, 0.2)
                    else
                        Utility:Tween(ToggleInner, {BackgroundColor3 = Config.MainColor, Position = UDim2.new(0, 2, 0, 2)}, 0.2)
                    end
                    
                    callback(ToggleValue)
                end
                
                ToggleHolder.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        ToggleValue = not ToggleValue
                        UpdateToggle()
                    end
                end)
                
                -- Set default state
                if default then
                    ToggleValue = true
                    UpdateToggle()
                end
                
                local ToggleFunctions = {}
                
                function ToggleFunctions:Set(value)
                    ToggleValue = value
                    UpdateToggle()
                end
                
                function ToggleFunctions:Get()
                    return ToggleValue
                end
                
                return ToggleFunctions
            end
            
            -- Slider
            function SectionFunctions:AddSlider(sliderText, min, max, default, decimals, callback)
                min = min or 0
                max = max or 100
                default = default or min
                decimals = decimals or 0
                callback = callback or function() end
                
                local SliderValue = default
                
                local SliderHolder = Utility:Create("Frame", {
                    Name = sliderText .. "Slider",
                    Parent = SectionContainer,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 50)
                })
                
                local SliderLabel = Utility:Create("TextLabel", {
                    Name = "Label",
                    Parent = SliderHolder,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 5, 0, 0),
                    Size = UDim2.new(1, -5, 0, 20),
                    Font = Config.Font,
                    Text = sliderText,
                    TextColor3 = Config.TextColor,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local SliderValueLabel = Utility:Create("TextLabel", {
                    Name = "Value",
                    Parent = SliderHolder,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -45, 0, 0),
                    Size = UDim2.new(0, 40, 0, 20),
                    Font = Config.Font,
                    Text = tostring(SliderValue),
                    TextColor3 = Config.TextColor,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Right
                })
                
                local SliderOuter = Utility:Create("Frame", {
                    Name = "SliderOuter",
                    Parent = SliderHolder,
                    BackgroundColor3 = Config.OutlineColor,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 5, 0, 25),
                    Size = UDim2.new(1, -10, 0, 10)
                })
                
                local SliderOuterCorner = Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 5),
                    Parent = SliderOuter
                })
                
                local SliderInner = Utility:Create("Frame", {
                    Name = "SliderInner",
                    Parent = SliderOuter,
                    BackgroundColor3 = Config.AccentColor,
                    BorderSizePixel = 0,
                    Size = UDim2.new(0, 0, 1, 0)
                })
                
                local SliderInnerCorner = Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 5),
                    Parent = SliderInner
                })
                
                local function UpdateSlider(value)
                    value = math.clamp(value, min, max)
                    
                    if decimals > 0 then
                        SliderValue = math.floor(value * (10 ^ decimals) + 0.5) / (10 ^ decimals)
                    else
                        SliderValue = math.floor(value)
                    end
                    
                    SliderValueLabel.Text = tostring(SliderValue)
                    
                    local percent = (SliderValue - min) / (max - min)
                    SliderInner.Size = UDim2.new(percent, 0, 1, 0)
                    
                    callback(SliderValue)
                end
                
                local dragging = false
                
                SliderOuter.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                        local position = math.clamp(input.Position.X - SliderOuter.AbsolutePosition.X, 0, SliderOuter.AbsoluteSize.X)
                        local percent = position / SliderOuter.AbsoluteSize.X
                        local value = min + (max - min) * percent
                        UpdateSlider(value)
                    end
                end)
                
                SliderOuter.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local position = math.clamp(input.Position.X - SliderOuter.AbsolutePosition.X, 0, SliderOuter.AbsoluteSize.X)
                        local percent = position / SliderOuter.AbsoluteSize.X
                        local value = min + (max - min) * percent
                        UpdateSlider(value)
                    end
                end)
                
                -- Set default value
                UpdateSlider(default)
                
                local SliderFunctions = {}
                
                function SliderFunctions:Set(value)
                    UpdateSlider(value)
                end
                
                function SliderFunctions:Get()
                    return SliderValue
                end
                
                return SliderFunctions
            end
            
            -- Dropdown
            function SectionFunctions:AddDropdown(dropdownText, options, default, callback)
                options = options or {}
                default = default or options[1] or ""
                callback = callback or function() end
                
                local DropdownValue = default
                local Expanded = false
                
                local DropdownHolder = Utility:Create("Frame", {
                    Name = dropdownText .. "Dropdown",
                    Parent = SectionContainer,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 40),
                    ClipsDescendants = true
                })
                
                local DropdownLabel = Utility:Create("TextLabel", {
                    Name = "Label",
                    Parent = DropdownHolder,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 5, 0, 0),
                    Size = UDim2.new(1, -5, 0, 20),
                    Font = Config.Font,
                    Text = dropdownText,
                    TextColor3 = Config.TextColor,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local DropdownButton = Utility:Create("TextButton", {
                    Name = "Button",
                    Parent = DropdownHolder,
                    BackgroundColor3 = Config.MainColor,
                    BorderColor3 = Config.OutlineColor,
                    BorderSizePixel = 1,
                    Position = UDim2.new(0, 0, 0, 20),
                    Size = UDim2.new(1, 0, 0, 20),
                    Font = Config.Font,
                    Text = DropdownValue,
                    TextColor3 = Config.TextColor,
                    TextSize = 14
                })
                
                local DropdownIcon = Utility:Create("TextLabel", {
                    Name = "Icon",
                    Parent = DropdownButton,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -20, 0, 0),
                    Size = UDim2.new(0, 20, 0, 20),
                    Font = Enum.Font.SourceSansBold,
                    Text = "â–¼",
                    TextColor3 = Config.TextColor,
                    TextSize = 14
                })
                
                local DropdownContent = Utility:Create("Frame", {
                    Name = "Content",
                    Parent = DropdownHolder,
                    BackgroundColor3 = Config.MainColor,
                    BorderColor3 = Config.OutlineColor,
                    BorderSizePixel = 1,
                    Position = UDim2.new(0, 0, 0, 40),
                    Size = UDim2.new(1, 0, 0, 0),
                    ClipsDescendants = true
                })
                
                local DropdownContentLayout = Utility:Create("UIListLayout", {
                    Parent = DropdownContent,
                    SortOrder = Enum.SortOrder.LayoutOrder
                })
                
                -- Add options
                for _, option in pairs(options) do
                    local OptionButton = Utility:Create("TextButton", {
                        Name = option,
                        Parent = DropdownContent,
                        BackgroundColor3 = Config.MainColor,
                        BackgroundTransparency = 0,
                        BorderSizePixel = 0,
                        Size = UDim2.new(1, 0, 0, 20),
                        Font = Config.Font,
                        Text = option,
                        TextColor3 = Config.TextColor,
                        TextSize = 14
                    })
                    
                    OptionButton.MouseEnter:Connect(function()
                        Utility:Tween(OptionButton, {BackgroundColor3 = Color3.fromRGB(45, 45, 45)}, 0.2)
                    end)
                    
                    OptionButton.MouseLeave:Connect(function()
                        Utility:Tween(OptionButton, {BackgroundColor3 = Config.MainColor}, 0.2)
                    end)
                    
                    OptionButton.MouseButton1Click:Connect(function()
                        DropdownValue = option
                        DropdownButton.Text = option
                        
                        Utility:Tween(DropdownHolder, {Size = UDim2.new(1, 0, 0, 40)}, 0.3)
                        Utility:Tween(DropdownContent, {Size = UDim2.new(1, 0, 0, 0)}, 0.3)
                        Utility:Tween(DropdownIcon, {Rotation = 0}, 0.3)
                        
                        Expanded = false
                        callback(option)
                    end)
                end
                
                -- Dropdown functionality
                DropdownButton.MouseButton1Click:Connect(function()
                    Expanded = not Expanded
                    
                    if Expanded then
local contentSize = #options * 20
                        Utility:Tween(DropdownHolder, {Size = UDim2.new(1, 0, 0, 40 + contentSize)}, 0.3)
                        Utility:Tween(DropdownContent, {Size = UDim2.new(1, 0, 0, contentSize)}, 0.3)
                        Utility:Tween(DropdownIcon, {Rotation = 180}, 0.3)
                    else
                        Utility:Tween(DropdownHolder, {Size = UDim2.new(1, 0, 0, 40)}, 0.3)
                        Utility:Tween(DropdownContent, {Size = UDim2.new(1, 0, 0, 0)}, 0.3)
                        Utility:Tween(DropdownIcon, {Rotation = 0}, 0.3)
                    end
                end)
                
                local DropdownFunctions = {}
                
                function DropdownFunctions:Set(value)
                    if table.find(options, value) then
                        DropdownValue = value
                        DropdownButton.Text = value
                        callback(value)
                    end
                end
                
                function DropdownFunctions:Get()
                    return DropdownValue
                end
                
                function DropdownFunctions:Refresh(newOptions, keepSelected)
                    options = newOptions or {}
                    
                    -- Clear existing options
                    for _, child in pairs(DropdownContent:GetChildren()) do
                        if child:IsA("TextButton") then
                            child:Destroy()
                        end
                    end
                    
                    -- Reset UI
                    Utility:Tween(DropdownHolder, {Size = UDim2.new(1, 0, 0, 40)}, 0.3)
                    Utility:Tween(DropdownContent, {Size = UDim2.new(1, 0, 0, 0)}, 0.3)
                    Utility:Tween(DropdownIcon, {Rotation = 0}, 0.3)
                    Expanded = false
                    
                    -- Add new options
                    for _, option in pairs(options) do
                        local OptionButton = Utility:Create("TextButton", {
                            Name = option,
                            Parent = DropdownContent,
                            BackgroundColor3 = Config.MainColor,
                            BackgroundTransparency = 0,
                            BorderSizePixel = 0,
                            Size = UDim2.new(1, 0, 0, 20),
                            Font = Config.Font,
                            Text = option,
                            TextColor3 = Config.TextColor,
                            TextSize = 14
                        })
                        
                        OptionButton.MouseEnter:Connect(function()
                            Utility:Tween(OptionButton, {BackgroundColor3 = Color3.fromRGB(45, 45, 45)}, 0.2)
                        end)
                        
                        OptionButton.MouseLeave:Connect(function()
                            Utility:Tween(OptionButton, {BackgroundColor3 = Config.MainColor}, 0.2)
                        end)
                        
                        OptionButton.MouseButton1Click:Connect(function()
                            DropdownValue = option
                            DropdownButton.Text = option
                            
                            Utility:Tween(DropdownHolder, {Size = UDim2.new(1, 0, 0, 40)}, 0.3)
                            Utility:Tween(DropdownContent, {Size = UDim2.new(1, 0, 0, 0)}, 0.3)
                            Utility:Tween(DropdownIcon, {Rotation = 0}, 0.3)
                            
                            Expanded = false
                            callback(option)
                        end)
                    end
                    
                    -- Update value
                    if not keepSelected or not table.find(options, DropdownValue) then
                        DropdownValue = options[1] or ""
                        DropdownButton.Text = DropdownValue
                    end
                end
                
                return DropdownFunctions
            end
            
            -- Color Picker
            function SectionFunctions:AddColorPicker(colorText, default, callback)
                default = default or Color3.fromRGB(255, 255, 255)
                callback = callback or function() end
                
                local ColorValue = default
                local Expanded = false
                
                local ColorPickerHolder = Utility:Create("Frame", {
                    Name = colorText .. "ColorPicker",
                    Parent = SectionContainer,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 40),
                    ClipsDescendants = true
                })
                
                local ColorLabel = Utility:Create("TextLabel", {
                    Name = "Label",
                    Parent = ColorPickerHolder,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 5, 0, 0),
                    Size = UDim2.new(1, -45, 0, 30),
                    Font = Config.Font,
                    Text = colorText,
                    TextColor3 = Config.TextColor,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local ColorPreview = Utility:Create("Frame", {
                    Name = "Preview",
                    Parent = ColorPickerHolder,
                    BackgroundColor3 = ColorValue,
                    BorderColor3 = Config.OutlineColor,
                    BorderSizePixel = 1,
                    Position = UDim2.new(1, -35, 0, 5),
                    Size = UDim2.new(0, 30, 0, 20)
                })
                
                local ColorPickerCorner = Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = ColorPreview
                })
                
                local ColorPickerContent = Utility:Create("Frame", {
                    Name = "Content",
                    Parent = ColorPickerHolder,
                    BackgroundColor3 = Config.MainColor,
                    BorderColor3 = Config.OutlineColor,
                    BorderSizePixel = 1,
                    Position = UDim2.new(0, 0, 0, 35),
                    Size = UDim2.new(1, 0, 0, 0),
                    ClipsDescendants = true
                })
                
                local ColorPickerContentLayout = Utility:Create("UIListLayout", {
                    Parent = ColorPickerContent,
                    SortOrder = Enum.SortOrder.LayoutOrder
                })
                
                -- Create color picker UI elements
                local H, S, V = Color3.toHSV(ColorValue)
                
                -- Create the 2D saturation/value picker
                local SVPicker = Utility:Create("Frame", {
                    Name = "SVPicker",
                    Parent = ColorPickerContent,
                    BackgroundColor3 = Color3.fromHSV(H, 1, 1),
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, -10, 0, 100),
                    Position = UDim2.new(0, 5, 0, 5)
                })
                
                local SVPickerCorner = Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = SVPicker
                })
                
                local SVPickerGradientS = Utility:Create("UIGradient", {
                    Parent = SVPicker,
                    Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                        ColorSequenceKeypoint.new(1, Color3.fromHSV(H, 1, 1))
                    }),
                    Transparency = NumberSequence.new(0),
                    Rotation = 90
                })
                
                local SVPickerGradientV = Utility:Create("UIGradient", {
                    Parent = SVPicker,
                    Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
                        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
                    }),
                    Transparency = NumberSequence.new({
                        NumberSequenceKeypoint.new(0, 0),
                        NumberSequenceKeypoint.new(1, 1)
                    }),
                    Rotation = 0
                })
                
                local SVPickerIndicator = Utility:Create("Frame", {
                    Name = "Indicator",
                    Parent = SVPicker,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BackgroundTransparency = 0,
                    BorderSizePixel = 1,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(0, 6, 0, 6),
                    Position = UDim2.new(S, -3, 1 - V, -3),
                    AnchorPoint = Vector2.new(0, 0),
                    ZIndex = 2
                })
                
                local SVPickerCorner2 = Utility:Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = SVPickerIndicator
                })
                
                -- Create the hue slider
                local HuePicker = Utility:Create("Frame", {
                    Name = "HuePicker",
                    Parent = ColorPickerContent,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, -10, 0, 20),
                    Position = UDim2.new(0, 5, 0, 110)
                })
                
                local HuePickerCorner = Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = HuePicker
                })
                
                local HuePickerGradient = Utility:Create("UIGradient", {
                    Parent = HuePicker,
                    Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                        ColorSequenceKeypoint.new(0.167, Color3.fromRGB(255, 255, 0)),
                        ColorSequenceKeypoint.new(0.333, Color3.fromRGB(0, 255, 0)),
                        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
                        ColorSequenceKeypoint.new(0.667, Color3.fromRGB(0, 0, 255)),
                        ColorSequenceKeypoint.new(0.833, Color3.fromRGB(255, 0, 255)),
                        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
                    })
                })
                
                local HuePickerIndicator = Utility:Create("Frame", {
                    Name = "Indicator",
                    Parent = HuePicker,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BackgroundTransparency = 0,
                    BorderSizePixel = 1,
                    BorderColor3 = Color3.fromRGB(0, 0, 0),
                    Size = UDim2.new(0, 4, 1, 0),
                    Position = UDim2.new(H, -2, 0, 0),
                    AnchorPoint = Vector2.new(0, 0),
                    ZIndex = 2
                })
                
                -- RGB text fields
                local RGBFields = Utility:Create("Frame", {
                    Name = "RGBFields",
                    Parent = ColorPickerContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 30),
                    Position = UDim2.new(0, 0, 0, 135)
                })
                
                local function CreateRGBField(name, value, pos)
                    local Field = Utility:Create("Frame", {
                        Name = name,
                        Parent = RGBFields,
                        BackgroundTransparency = 1,
                        Size = UDim2.new(0, 60, 1, 0),
                        Position = UDim2.new(pos, 5, 0, 0)
                    })
                    
                    local FieldLabel = Utility:Create("TextLabel", {
                        Name = "Label",
                        Parent = Field,
                        BackgroundTransparency = 1,
                        Size = UDim2.new(0, 20, 1, 0),
                        Font = Config.Font,
                        Text = name,
                        TextColor3 = Config.TextColor,
                        TextSize = 14
                    })
                    
                    local FieldInput = Utility:Create("TextBox", {
                        Name = "Input",
                        Parent = Field,
                        BackgroundColor3 = Config.MainColor,
                        BorderColor3 = Config.OutlineColor,
                        BorderSizePixel = 1,
                        Position = UDim2.new(0, 20, 0, 5),
                        Size = UDim2.new(0, 40, 0, 20),
                        Font = Config.Font,
                        Text = tostring(value),
                        TextColor3 = Config.TextColor,
                        TextSize = 14,
                        ClearTextOnFocus = true
                    })
                    
                    return FieldInput
                end
                
                local R = math.floor(ColorValue.R * 255 + 0.5)
                local G = math.floor(ColorValue.G * 255 + 0.5)
                local B = math.floor(ColorValue.B * 255 + 0.5)
                
                local RField = CreateRGBField("R", R, 0)
                local GField = CreateRGBField("G", G, 0.33)
                local BField = CreateRGBField("B", B, 0.66)
                
                -- Apply button
                local ApplyButton = Utility:Create("TextButton", {
                    Name = "Apply",
                    Parent = ColorPickerContent,
                    BackgroundColor3 = Config.AccentColor,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, -10, 0, 25),
                    Position = UDim2.new(0, 5, 0, 170),
                    Font = Config.Font,
                    Text = "Apply",
                    TextColor3 = Config.TextColor,
                    TextSize = 14
                })
                
                local ApplyButtonCorner = Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = ApplyButton
                })
                
                -- Function to update the color display
                local function UpdateColor()
                    local color = Color3.fromHSV(H, S, V)
                    ColorValue = color
                    
                    -- Update UI elements
                    ColorPreview.BackgroundColor3 = color
                    SVPicker.BackgroundColor3 = Color3.fromHSV(H, 1, 1)
                    SVPickerGradientS.Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                        ColorSequenceKeypoint.new(1, Color3.fromHSV(H, 1, 1))
                    })
                    
                    -- Update RGB fields
                    R = math.floor(color.R * 255 + 0.5)
                    G = math.floor(color.G * 255 + 0.5)
                    B = math.floor(color.B * 255 + 0.5)
                    
                    RField.Text = tostring(R)
                    GField.Text = tostring(G)
                    BField.Text = tostring(B)
                    
                    -- Update indicators
                    SVPickerIndicator.Position = UDim2.new(S, -3, 1 - V, -3)
                    HuePickerIndicator.Position = UDim2.new(H, -2, 0, 0)
                end
                
                -- Handle input for SV picker
                local SVDragging = false
                
                SVPicker.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        SVDragging = true
                        
                        local position = Vector2.new(
                            math.clamp(input.Position.X - SVPicker.AbsolutePosition.X, 0, SVPicker.AbsoluteSize.X),
                            math.clamp(input.Position.Y - SVPicker.AbsolutePosition.Y, 0, SVPicker.AbsoluteSize.Y)
                        )
                        
                        S = position.X / SVPicker.AbsoluteSize.X
                        V = 1 - (position.Y / SVPicker.AbsoluteSize.Y)
                        
                        UpdateColor()
                    end
                end)
                
                SVPicker.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        SVDragging = false
                    end
                end)
                
                -- Handle input for hue slider
                local HueDragging = false
                
                HuePicker.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        HueDragging = true
                        
                        local position = math.clamp(input.Position.X - HuePicker.AbsolutePosition.X, 0, HuePicker.AbsoluteSize.X)
                        H = position / HuePicker.AbsoluteSize.X
                        
                        UpdateColor()
                    end
                end)
                
                HuePicker.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        HueDragging = false
                    end
                end)
                
                -- Handle mouse movement
                UserInputService.InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        if SVDragging then
                            local position = Vector2.new(
                                math.clamp(input.Position.X - SVPicker.AbsolutePosition.X, 0, SVPicker.AbsoluteSize.X),
                                math.clamp(input.Position.Y - SVPicker.AbsolutePosition.Y, 0, SVPicker.AbsoluteSize.Y)
                            )
                            
                            S = position.X / SVPicker.AbsoluteSize.X
                            V = 1 - (position.Y / SVPicker.AbsoluteSize.Y)
                            
                            UpdateColor()
                        elseif HueDragging then
                            local position = math.clamp(input.Position.X - HuePicker.AbsolutePosition.X, 0, HuePicker.AbsoluteSize.X)
                            H = position / HuePicker.AbsoluteSize.X
                            
                            UpdateColor()
                        end
                    end
                end)
                
                -- Handle RGB field input
                RField.FocusLost:Connect(function(enterPressed)
                    local value = tonumber(RField.Text)
                    if value then
                        value = math.clamp(value, 0, 255)
                        local color = Color3.fromRGB(value, G, B)
                        H, S, V = Color3.toHSV(color)
                        UpdateColor()
                    else
                        RField.Text = tostring(R)
                    end
                end)
                
                GField.FocusLost:Connect(function(enterPressed)
                    local value = tonumber(GField.Text)
                    if value then
                        value = math.clamp(value, 0, 255)
                        local color = Color3.fromRGB(R, value, B)
                        H, S, V = Color3.toHSV(color)
                        UpdateColor()
                    else
                        GField.Text = tostring(G)
                    end
                end)
                
                BField.FocusLost:Connect(function(enterPressed)
                    local value = tonumber(BField.Text)
                    if value then
                        value = math.clamp(value, 0, 255)
                        local color = Color3.fromRGB(R, G, value)
                        H, S, V = Color3.toHSV(color)
                        UpdateColor()
                    else
                        BField.Text = tostring(B)
                    end
                end)
                
                -- Handle apply button
                ApplyButton.MouseButton1Click:Connect(function()
                    Utility:Tween(ColorPickerHolder, {Size = UDim2.new(1, 0, 0, 40)}, 0.3)
                    Utility:Tween(ColorPickerContent, {Size = UDim2.new(1, 0, 0, 0)}, 0.3)
                    Expanded = false
                    callback(ColorValue)
                end)
                
                -- Toggle color picker
                ColorPreview.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        Expanded = not Expanded
                        
                        if Expanded then
                            Utility:Tween(ColorPickerHolder, {Size = UDim2.new(1, 0, 0, 205)}, 0.3)
                            Utility:Tween(ColorPickerContent, {Size = UDim2.new(1, 0, 0, 200)}, 0.3)
                        else
                            Utility:Tween(ColorPickerHolder, {Size = UDim2.new(1, 0, 0, 40)}, 0.3)
                            Utility:Tween(ColorPickerContent, {Size = UDim2.new(1, 0, 0, 0)}, 0.3)
                        end
                    end
                end)
                
                -- Initialize with default color
                ColorValue = default
                H, S, V = Color3.toHSV(default)
                UpdateColor()
                
                local ColorPickerFunctions = {}
                
                function ColorPickerFunctions:Set(color)
                    ColorValue = color
                    H, S, V = Color3.toHSV(color)
                    UpdateColor()
                    callback(color)
                end
                
                function ColorPickerFunctions:Get()
                    return ColorValue
                end
                
                return ColorPickerFunctions
            end
            
            -- Text input field
            function SectionFunctions:AddTextbox(boxText, default, placeholder, clearOnFocus, callback)
                default = default or ""
                placeholder = placeholder or ""
                clearOnFocus = clearOnFocus or false
                callback = callback or function() end
                
                local TextboxValue = default
                
                local TextboxHolder = Utility:Create("Frame", {
                    Name = boxText .. "Textbox",
                    Parent = SectionContainer,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 50)
                })
                
                local TextboxLabel = Utility:Create("TextLabel", {
                    Name = "Label",
                    Parent = TextboxHolder,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 5, 0, 0),
                    Size = UDim2.new(1, -5, 0, 20),
                    Font = Config.Font,
                    Text = boxText,
                    TextColor3 = Config.TextColor,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local TextboxFrame = Utility:Create("Frame", {
                    Name = "Frame",
                    Parent = TextboxHolder,
                    BackgroundColor3 = Config.OutlineColor,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 20),
                    Size = UDim2.new(1, 0, 0, 30)
                })
                
                local TextboxFrameCorner = Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = TextboxFrame
                })
                
                local Textbox = Utility:Create("TextBox", {
                    Name = "Textbox",
                    Parent = TextboxFrame,
                    BackgroundColor3 = Config.MainColor,
                    Position = UDim2.new(0, 1, 0, 1),
                    Size = UDim2.new(1, -2, 1, -2),
                    Font = Config.Font,
                    Text = default,
                    TextColor3 = Config.TextColor,
                    TextSize = 14,
                    PlaceholderText = placeholder,
                    ClearTextOnFocus = clearOnFocus
                })
                
                local TextboxCorner = Utility:Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = Textbox
                })
                
                Textbox.FocusLost:Connect(function(enterPressed)
                    TextboxValue = Textbox.Text
                    callback(TextboxValue)
                end)
                
                local TextboxFunctions = {}
                
                function TextboxFunctions:Set(value)
                    TextboxValue = value
                    Textbox.Text = value
                    callback(value)
                end
                
                function TextboxFunctions:Get()
                    return TextboxValue
                end
                
                return TextboxFunctions
            end
            
            -- Label
            function SectionFunctions:AddLabel(labelText)
                local LabelHolder = Utility:Create("Frame", {
                    Name = "Label",
                    Parent = SectionContainer,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 20)
                })
                
                local Label = Utility:Create("TextLabel", {
                    Name = "Text",
                    Parent = LabelHolder,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    Font = Config.Font,
                    Text = labelText,
                    TextColor3 = Config.TextColor,
                    TextSize = 14,
                    TextWrapped = true
                })
                
                local LabelFunctions = {}
                
                function LabelFunctions:Set(text)
                    Label.Text = text
                end
                
                function LabelFunctions:Get()
                    return Label.Text
                end
                
                return LabelFunctions
            end
            
            -- Separator
            function SectionFunctions:AddSeparator()
                local SeparatorHolder = Utility:Create("Frame", {
                    Name = "Separator",
                    Parent = SectionContainer,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 10)
                })
                
                local Separator = Utility:Create("Frame", {
                    Name = "Line",
                    Parent = SeparatorHolder,
                    BackgroundColor3 = Config.OutlineColor,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0.5, 0),
                    Size = UDim2.new(1, 0, 0, 1)
                })
                
                return SeparatorHolder
            end
            
            return SectionFunctions
        end
        
        return TabFunctions
    end
    
    -- Tab selection function
    function TabSystem:SelectTab(tab)
        if SelectedTab == tab then return end
        
        -- Deselect current tab
        if SelectedTab then
            Utility:Tween(SelectedTab.Button, {TextColor3 = Config.SubTextColor}, 0.2)
            SelectedTab.Container.Visible = false
        end
        
        -- Select new tab
        Utility:Tween(tab.Button, {TextColor3 = Config.AccentColor}, 0.2)
        tab.Container.Visible = true
        
        SelectedTab = tab
    end
    
    -- Return window functions
    local WindowFunctions = {}
    
    function WindowFunctions:SetTheme(theme)
        for key, value in pairs(theme) do
            if Config[key] ~= nil then
                Config[key] = value
            end
        end
        
        -- Update UI with new theme (would need to be implemented)
    end
    
    WindowFunctions.TabSystem = TabSystem
    
    -- Key bind system
    local KeyBinds = {}
    
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        if input.UserInputType == Enum.UserInputType.Keyboard then
            local key = input.KeyCode
            
            -- Check if key is bound
            if KeyBinds[key] then
                KeyBinds[key]()
            end
        end
    end)
    
    function WindowFunctions:BindToKey(key, callback)
        if typeof(key) == "EnumItem" then
            KeyBinds[key] = callback
        end
    end
    
    function WindowFunctions:UnbindKey(key)
        if typeof(key) == "EnumItem" then
            KeyBinds[key] = nil
        end
    end
    
    -- Notifications
    function WindowFunctions:Notify(title, text, duration)
        title = title or "Notification"
        text = text or ""
        duration = duration or 3
        
        local NotificationHolder = Utility:Create("Frame", {
            Name = "NotificationHolder",
            Parent = ScreenGui,
            BackgroundTransparency = 1,
            Position = UDim2.new(1, -330, 0, 10),
            Size = UDim2.new(0, 320, 0, 0),
            ClipsDescendants = true,
            AutomaticSize = Enum.AutomaticSize.Y
        })
        
local Notification = Utility:Create("Frame", {
            Name = "Notification",
            Parent = NotificationHolder,
            BackgroundColor3 = Config.MainColor,
            BorderColor3 = Config.OutlineColor,
            BorderSizePixel = 1,
            Size = UDim2.new(1, 0, 0, 0),
            ClipsDescendants = true
        })
        
        local NotificationCorner = Utility:Create("UICorner", {
            CornerRadius = UDim.new(0, 4),
            Parent = Notification
        })
        
        local NotificationTitle = Utility:Create("TextLabel", {
            Name = "Title",
            Parent = Notification,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 5),
            Size = UDim2.new(1, -40, 0, 20),
            Font = Config.Font,
            Text = title,
            TextColor3 = Config.AccentColor,
            TextSize = 16,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        local NotificationText = Utility:Create("TextLabel", {
            Name = "Text",
            Parent = Notification,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 25),
            Size = UDim2.new(1, -20, 0, 0),
            Font = Config.Font,
            Text = text,
            TextColor3 = Config.TextColor,
            TextSize = 14,
            TextWrapped = true,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextYAlignment = Enum.TextYAlignment.Top,
            AutomaticSize = Enum.AutomaticSize.Y
        })
        
        local NotificationClose = Utility:Create("TextButton", {
            Name = "Close",
            Parent = Notification,
            BackgroundTransparency = 1,
            Position = UDim2.new(1, -25, 0, 5),
            Size = UDim2.new(0, 20, 0, 20),
            Font = Enum.Font.SourceSansBold,
            Text = "Ã—",
            TextColor3 = Config.TextColor,
            TextSize = 20
        })
        
        -- Calculate height
        local textHeight = NotificationText.TextBounds.Y
        local totalHeight = 35 + textHeight
        
        -- Animate in
        Notification.Size = UDim2.new(1, 0, 0, 0)
        Utility:Tween(Notification, {Size = UDim2.new(1, 0, 0, totalHeight)}, 0.3)
        
        -- Close button handler
        NotificationClose.MouseButton1Click:Connect(function()
            Utility:Tween(Notification, {Size = UDim2.new(1, 0, 0, 0)}, 0.3)
            wait(0.3)
            Notification:Destroy()
        end)
        
        -- Auto close
        task.spawn(function()
            wait(duration)
            if Notification and Notification.Parent then
                Utility:Tween(Notification, {Size = UDim2.new(1, 0, 0, 0)}, 0.3)
                wait(0.3)
                if Notification and Notification.Parent then
                    Notification:Destroy()
                end
            end
        end)
        
        return Notification
    end
    
    return WindowFunctions
end

-- Export the library
return Library
