-- Celestial UI Library
-- A premium UI library for Roblox executors
-- Inspired by Splix/BBot with layered design and accent colors

local library = {
    theme = {
        accent = Color3.fromRGB(100, 100, 255),       -- Main accent color
        background = Color3.fromRGB(26, 26, 26),      -- Background color
        foreground = Color3.fromRGB(36, 36, 36),      -- Foreground elements
        dark = Color3.fromRGB(22, 22, 22),            -- Dark elements
        outline = Color3.fromRGB(50, 50, 50),         -- Outlines
        light_text = Color3.fromRGB(240, 240, 240),   -- Light text
        dark_text = Color3.fromRGB(150, 150, 150),    -- Dark/secondary text
        font = Enum.Font.Gotham                       -- Default font
    },
    flags = {},                   -- For toggles and settings
    options = {},                 -- For dropdown/selector options
    keybinds = {},                -- For key binds
    connections = {},             -- For event connections
    dragging = false,             -- Dragging state
    registry = {},                -- Element registry
    tabs = {},                    -- Tab registry
    selected_tab = nil            -- Currently selected tab
}

-- Utility Functions
function library:create(class, properties)
    local instance = Instance.new(class)
    for prop, value in pairs(properties or {}) do
        instance[prop] = value
    end
    return instance
end

function library:tween(object, info, properties)
    local tween = game:GetService("TweenService"):Create(object, info, properties)
    tween:Play()
    return tween
end

function library:connect(signal, callback)
    local connection = signal:Connect(callback)
    table.insert(self.connections, connection)
    return connection
end

function library:disconnect_all()
    for _, connection in pairs(self.connections) do
        if connection.Connected then
            connection:Disconnect()
        end
    end
    self.connections = {}
end

function library:set_draggable(ui_element, drag_handle)
    local dragging, dragInput, dragStart, startPos
    
    self:connect(drag_handle.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = ui_element.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    self:connect(drag_handle.InputChanged, function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    self:connect(game:GetService("UserInputService").InputChanged, function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            ui_element.Position = UDim2.new(
                startPos.X.Scale, 
                startPos.X.Offset + delta.X, 
                startPos.Y.Scale, 
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end

-- Apply Glow Effect
function library:apply_glow(parent, color, position, size, transparency)
    local glow = self:create("ImageLabel", {
        Parent = parent,
        Name = "Glow",
        BackgroundTransparency = 1,
        Position = position or UDim2.new(0, -15, 0, -15),
        Size = size or UDim2.new(1, 30, 1, 30),
        ZIndex = 0,
        Image = "rbxassetid://5028857084",
        ImageColor3 = color or self.theme.accent,
        ImageTransparency = transparency or 0.8,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(24, 24, 276, 276)
    })
    return glow
end

-- Create Layered Frame (multi-level border design)
function library:create_layered_frame(parent, position, size, accent)
    local outer_border = self:create("Frame", {
        Parent = parent,
        Name = "OuterBorder",
        BackgroundColor3 = accent or self.theme.accent,
        BorderSizePixel = 0,
        Position = position,
        Size = size,
        ZIndex = 1
    })
    
    -- Apply outer glow
    self:apply_glow(outer_border, accent or self.theme.accent)
    
    -- First inner layer (darker)
    local inner_frame1 = self:create("Frame", {
        Parent = outer_border,
        Name = "InnerFrame1",
        BackgroundColor3 = self.theme.dark,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 2, 0, 2),
        Size = UDim2.new(1, -4, 1, -4),
        ZIndex = 2
    })
    
    -- Second inner layer
    local inner_frame2 = self:create("Frame", {
        Parent = inner_frame1,
        Name = "InnerFrame2",
        BackgroundColor3 = self.theme.foreground,
        BorderColor3 = self.theme.outline,
        BorderSizePixel = 1,
        Position = UDim2.new(0, 2, 0, 2),
        Size = UDim2.new(1, -4, 1, -4),
        ZIndex = 3
    })
    
    -- Content area (where elements will go)
    local content_frame = self:create("Frame", {
        Parent = inner_frame2,
        Name = "ContentFrame",
        BackgroundColor3 = self.theme.background,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 2, 0, 2),
        Size = UDim2.new(1, -4, 1, -4),
        ZIndex = 4
    })
    
    -- Accent line at the top
    local accent_line = self:create("Frame", {
        Parent = content_frame,
        Name = "AccentLine",
        BackgroundColor3 = accent or self.theme.accent,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 0, 2),
        ZIndex = 5
    })
    
    -- Apply inner glow to accent line
    self:apply_glow(accent_line, accent or self.theme.accent, UDim2.new(0, -15, 0, -5), UDim2.new(1, 30, 0, 12), 0.85)
    
    return {
        outer_border = outer_border,
        inner_frame1 = inner_frame1,
        inner_frame2 = inner_frame2,
        content_frame = content_frame,
        accent_line = accent_line
    }
end

-- Create Main Window
function library:create_window(title, size, position)
    if self.window then
        self.window:Destroy()
    end
    
    self.window_size = size or UDim2.new(0, 550, 0, 400)
    
    -- Create ScreenGui
    local screen_gui = self:create("ScreenGui", {
        Name = "CelestialLibrary",
        Parent = game:GetService("CoreGui"),
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false
    })
    
    -- Protect GUI if syn is available
    if syn and syn.protect_gui then
        syn.protect_gui(screen_gui)
    end
    
    -- Create layered main window
    local window_layers = self:create_layered_frame(
        screen_gui,
        position or UDim2.new(0.5, -self.window_size.X.Offset / 2, 0.5, -self.window_size.Y.Offset / 2),
        self.window_size
    )
    
    local window = window_layers.outer_border
    local content_frame = window_layers.content_frame
    
    -- Window Title Bar
    local title_bar = self:create("Frame", {
        Parent = content_frame,
        Name = "TitleBar",
        BackgroundColor3 = self.theme.dark,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 2),
        Size = UDim2.new(1, 0, 0, 30),
        ZIndex = 5
    })
    
    -- Window Title
    local title_label = self:create("TextLabel", {
        Parent = title_bar,
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(1, -20, 1, 0),
        Font = self.theme.font,
        Text = title or "Celestial UI",
        TextColor3 = self.theme.light_text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 6
    })
    
    -- Make window draggable via title bar
    self:set_draggable(window, title_bar)
    
    -- Close Button
    local close_button = self:create("TextButton", {
        Parent = title_bar,
        Name = "CloseButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -25, 0, 5),
        Size = UDim2.new(0, 20, 0, 20),
        Font = self.theme.font,
        Text = "âœ•",
        TextColor3 = self.theme.light_text,
        TextSize = 14,
        ZIndex = 6
    })
    
    self:connect(close_button.MouseEnter, function()
        close_button.TextColor3 = Color3.fromRGB(255, 100, 100)
    end)
    
    self:connect(close_button.MouseLeave, function()
        close_button.TextColor3 = self.theme.light_text
    end)
    
    self:connect(close_button.MouseButton1Click, function()
        screen_gui:Destroy()
        self:disconnect_all()
    end)
    
    -- Tab Container
    local tab_bar = self:create("Frame", {
        Parent = content_frame,
        Name = "TabBar",
        BackgroundColor3 = self.theme.dark,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 32),
        Size = UDim2.new(1, 0, 0, 30),
        ZIndex = 5
    })
    
    -- Content Container (where tab content will go)
    local content_container = self:create("Frame", {
        Parent = content_frame,
        Name = "ContentContainer",
        BackgroundColor3 = self.theme.background,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 62),
        Size = UDim2.new(1, 0, 1, -62),
        ZIndex = 5,
        ClipsDescendants = true
    })
    
    -- Store references
    self.gui = screen_gui
    self.window = window
    self.title_bar = title_bar
    self.tab_bar = tab_bar
    self.content_container = content_container
    
    -- Initialize tabs
    self.tab_buttons = {}
    self.tab_pages = {}
    self.next_tab_position = 10
    
    return self
end

-- Create Tab
function library:create_tab(name)
    assert(self.window, "Window must be created before creating tabs")
    
    -- Tab Button
    local tab_button = self:create("TextButton", {
        Parent = self.tab_bar,
        Name = name.."Button",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, self.next_tab_position, 0, 0),
        Size = UDim2.new(0, 100, 1, 0),
        Font = self.theme.font,
        Text = name,
        TextColor3 = self.theme.dark_text,
        TextSize = 14,
        ZIndex = 6
    })
    
    -- Selected indicator (shows when tab is active)
    local selected_indicator = self:create("Frame", {
        Parent = tab_button,
        Name = "SelectedIndicator",
        BackgroundColor3 = self.theme.accent,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -2),
        Size = UDim2.new(1, 0, 0, 2),
        Visible = false,
        ZIndex = 6
    })
    
    -- Tab Content Page
    local tab_page = self:create("ScrollingFrame", {
        Parent = self.content_container,
        Name = name.."Page",
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 1, 0),
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = self.theme.accent,
        VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Right,
        Visible = false,
        ZIndex = 6,
        CanvasSize = UDim2.new(0, 0, 0, 0)
    })
    
    -- Auto layout for tab content
    local ui_list_layout = self:create("UIListLayout", {
        Parent = tab_page,
        Padding = UDim.new(0, 10),
        FillDirection = Enum.FillDirection.Vertical,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder
    })
    
    -- Padding
    local ui_padding = self:create("UIPadding", {
        Parent = tab_page,
        PaddingLeft = UDim.new(0, 10),
        PaddingRight = UDim.new(0, 10),
        PaddingTop = UDim.new(0, 10),
        PaddingBottom = UDim.new(0, 10)
    })
    
    -- Update canvas size as elements are added
    self:connect(ui_list_layout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
        tab_page.CanvasSize = UDim2.new(0, 0, 0, ui_list_layout.AbsoluteContentSize.Y + 20)
    end)
    
    -- Tab click handler
    self:connect(tab_button.MouseButton1Click, function()
        self:select_tab(name)
    end)
    
    -- Store tab references
    self.tab_buttons[name] = tab_button
    self.tab_pages[name] = tab_page
    
    -- Update position for next tab
    self.next_tab_position = self.next_tab_position + 105
    
    -- Set as active tab if first one
    if not self.selected_tab then
        self:select_tab(name)
    end
    
    -- Tab object for adding elements
    local tab = {}
    local element_y_position = 0
    
    -- Create Section
    function tab:create_section(section_name)
        local section_frame = library:create("Frame", {
            Parent = tab_page,
            Name = section_name.."Section",
            BackgroundColor3 = library.theme.foreground,
            BorderColor3 = library.theme.outline,
            Size = UDim2.new(1, -20, 0, 36), -- Will expand as elements are added
            ZIndex = 7
        })
        
        -- Section title
        local section_title = library:create("TextLabel", {
            Parent = section_frame,
            Name = "Title",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 0),
            Size = UDim2.new(1, -20, 0, 30),
            Font = library.theme.font,
            Text = section_name,
            TextColor3 = library.theme.light_text,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 8
        })
        
        -- Content container for section elements
        local section_content = library:create("Frame", {
            Parent = section_frame,
            Name = "Content",
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 30),
            Size = UDim2.new(1, -20, 1, -35),
            ZIndex = 8
        })
        
        -- Auto layout for section content
        local section_layout = library:create("UIListLayout", {
            Parent = section_content,
            Padding = UDim.new(0, 8),
            FillDirection = Enum.FillDirection.Vertical,
            HorizontalAlignment = Enum.HorizontalAlignment.Left,
            SortOrder = Enum.SortOrder.LayoutOrder
        })
        
        -- Update section size as elements are added
        library:connect(section_layout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
            section_frame.Size = UDim2.new(1, -20, 0, section_layout.AbsoluteContentSize.Y + 40)
        end)
        
        local section = {}
        
        -- Create Button
        function section:add_button(button_text, callback)
            local button = library:create("TextButton", {
                Parent = section_content,
                Name = button_text.."Button",
                BackgroundColor3 = library.theme.dark,
                BorderColor3 = library.theme.outline,
                Size = UDim2.new(1, 0, 0, 32),
                Font = library.theme.font,
                Text = "",
                TextColor3 = library.theme.light_text,
                AutoButtonColor = false,
                ZIndex = 9
            })
            
            local button_text_label = library:create("TextLabel", {
                Parent = button,
                Name = "ButtonText",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -20, 1, 0),
                Font = library.theme.font,
                Text = button_text,
                TextColor3 = library.theme.light_text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 10
            })
            
            -- Button effects
            library:connect(button.MouseEnter, function()
                library:tween(button, TweenInfo.new(0.2), {BackgroundColor3 = library.theme.accent})
            end)
            
            library:connect(button.MouseLeave, function()
                library:tween(button, TweenInfo.new(0.2), {BackgroundColor3 = library.theme.dark})
            end)
            
            library:connect(button.MouseButton1Down, function()
                library:tween(button, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(
                    library.theme.accent.R * 0.8,
                    library.theme.accent.G * 0.8,
                    library.theme.accent.B * 0.8
                )})
            end)
            
            library:connect(button.MouseButton1Up, function()
                library:tween(button, TweenInfo.new(0.1), {BackgroundColor3 = library.theme.accent})
            end)
            
            library:connect(button.MouseButton1Click, function()
                if callback then callback() end
            end)
            
            return button
        end
        
        -- Create Toggle
        function section:add_toggle(toggle_text, default, flag, callback)
            local toggle_value = default or false
            
            local toggle_container = library:create("Frame", {
                Parent = section_content,
                Name = toggle_text.."Toggle",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 32),
                ZIndex = 9
            })
            
            local toggle_label = library:create("TextLabel", {
                Parent = toggle_container,
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -50, 1, 0),
                Font = library.theme.font,
                Text = toggle_text,
                TextColor3 = library.theme.light_text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 10
            })
            
            local toggle_outline = library:create("Frame", {
                Parent = toggle_container,
                Name = "Outline",
                BackgroundColor3 = library.theme.dark,
                BorderColor3 = library.theme.outline,
                Position = UDim2.new(1, -30, 0.5, -10),
                Size = UDim2.new(0, 20, 0, 20),
                ZIndex = 10
            })
            
            local toggle_button = library:create("Frame", {
                Parent = toggle_outline,
                Name = "Button",
                BackgroundColor3 = toggle_value and library.theme.accent or library.theme.dark,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 2, 0, 2),
                Size = UDim2.new(1, -4, 1, -4),
                ZIndex = 11
            })
            
            if flag then
                library.flags[flag] = toggle_value
            end
            
            local function update_toggle()
                toggle_value = not toggle_value
                
                if flag then
                    library.flags[flag] = toggle_value
                end
                
                library:tween(toggle_button, TweenInfo.new(0.2), {
                    BackgroundColor3 = toggle_value and library.theme.accent or library.theme.dark
                })
                
                if callback then
                    callback(toggle_value)
                end
            end
            
            -- Handle interactions
            library:connect(toggle_container.InputBegan, function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    update_toggle()
                end
            end)
            
            return {
                container = toggle_container,
                set_value = function(self, value)
                    toggle_value = value
                    if flag then
                        library.flags[flag] = toggle_value
                    end
                    toggle_button.BackgroundColor3 = toggle_value and library.theme.accent or library.theme.dark
                    if callback then
                        callback(toggle_value)
                    end
                end,
                get_value = function()
                    return toggle_value
                end
            }
        end
        
        -- Create Slider
        function section:add_slider(slider_text, min, max, default, decimals, flag, callback)
            local slider_value = default or min
            decimals = decimals or 0
            
            local slider_container = library:create("Frame", {
                Parent = section_content,
                Name = slider_text.."Slider",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 50),
                ZIndex = 9
            })
            
            local slider_label = library:create("TextLabel", {
                Parent = slider_container,
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -20, 0, 20),
                Font = library.theme.font,
                Text = slider_text,
                TextColor3 = library.theme.light_text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 10
            })
            
            local value_display = library:create("TextLabel", {
                Parent = slider_container,
                Name = "Value",
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -50, 0, 0),
                Size = UDim2.new(0, 40, 0, 20),
                Font = library.theme.font,
                Text = tostring(slider_value),
                TextColor3 = library.theme.light_text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Right,
                ZIndex = 10
            })
            
            local slider_background = library:create("Frame", {
                Parent = slider_container,
                Name = "Background",
                BackgroundColor3 = library.theme.dark,
                BorderColor3 = library.theme.outline,
                Position = UDim2.new(0, 10, 0, 25),
                Size = UDim2.new(1, -20, 0, 10),
                ZIndex = 10
            })
            
            local slider_fill = library:create("Frame", {
                Parent = slider_background,
                Name = "Fill",
                BackgroundColor3 = library.theme.accent,
                BorderSizePixel = 0,
                Size = UDim2.new((slider_value - min) / (max - min), 0, 1, 0),
                ZIndex = 11
            })
            
            if flag then
                library.flags[flag] = slider_value
            end
            
            local function update_slider(input_position)
                local relative_position = math.clamp((input_position.X - slider_background.AbsolutePosition.X) / slider_background.AbsoluteSize.X, 0, 1)
                local new_value = min + (max - min) * relative_position
                
                -- Apply decimal rounding
                new_value = math.floor(new_value * (10 ^ decimals)) / (10 ^ decimals)
                
                -- Clamp to min/max
                new_value = math.clamp(new_value, min, max)
                
                slider_value = new_value
                value_display.Text = tostring(slider_value)
                
                if flag then
                    library.flags[flag] = slider_value
                end
                
                slider_fill.Size = UDim2.new((slider_value - min) / (max - min), 0, 1, 0)
                
                if callback then
                    callback(slider_value)
                end
            end
            
            -- Handle interactions
            local is_dragging = false
            
            library:connect(slider_background.InputBegan, function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    is_dragging = true
                    update_slider(input.Position)
                end
            end)
            
            library:connect(slider_background.InputEnded, function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    is_dragging = false
                end
            end)
            
            library:connect(game:GetService("UserInputService").InputChanged, function(input)
                if is_dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    update_slider(input.Position)
                end
            end)
            
            return {
                container = slider_container,
                set_value = function(self, value)
                    slider_value = math.clamp(value, min, max)
                    value_display.Text = tostring(slider_value)
                    if flag then
                        library.flags[flag] = slider_value
                    end
                    slider_fill.Size = UDim2.new((slider_value - min) / (max - min), 0, 1, 0)
                    if callback then
                        callback(slider_value)
                    end
                end,
                get_value = function()
                    return slider_value
                end
            }
        end
        
        -- Create Dropdown
        function section:add_dropdown(dropdown_text, options, default, flag, callback)
            local dropdown_value = default or options[1] or ""
            local is_open = false
            
            local dropdown_container = library:create("Frame", {
                Parent = section_content,
                Name = dropdown_text.."Dropdown",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 36),
                ZIndex = 9,
                ClipsDescendants = true
            })
            
            local dropdown_label = library:create("TextLabel", {
                Parent = dropdown_container,
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -20, 0, 20),
                Font = library.theme.font,
                Text = dropdown_text,
                TextColor3 = library.theme.light_text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 10
            })
            
            local dropdown_button = library:create("TextButton", {
                Parent = dropdown_container,
                Name = "Button",
                BackgroundColor3 = library.theme.dark,
                BorderColor3 = library.theme.outline,
                Position = UDim2.new(0, 0, 0, 20),
                Size = UDim2.new(1, 0, 0, 32),
                Font = library.theme.font,
                Text = "",
                TextColor3 = library.theme.light_text,
                ZIndex = 10
            })
            
            local selected_value = library:create("TextLabel", {
                Parent = dropdown_button,
                Name = "Value",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -40, 1, 0),
                Font = library.theme.font,
                Text = dropdown_value,
                TextColor3 = library.theme.light_text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 11
            })
            
            local dropdown_arrow = library:create("TextLabel", {
                Parent = dropdown_button,
                Name = "Arrow",
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -20, 0, 0),Size = UDim2.new(0, 20, 1, 0),
                Font = library.theme.font,
                Text = "â–¼",
                TextColor3 = library.theme.light_text,
                TextSize = 14,
                ZIndex = 11
            })
            
            local dropdown_content = library:create("Frame", {
                Parent = dropdown_container,
                Name = "Content",
                BackgroundColor3 = library.theme.dark,
                BorderColor3 = library.theme.outline,
                Position = UDim2.new(0, 0, 0, 52),
                Size = UDim2.new(1, 0, 0, 0), -- Will expand when opened
                Visible = false,
                ZIndex = 12
            })
            
            local content_list = library:create("UIListLayout", {
                Parent = dropdown_content,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 2)
            })
            
            -- Options
            for i, option in ipairs(options) do
                local option_button = library:create("TextButton", {
                    Parent = dropdown_content,
                    Name = "Option_"..option,
                    BackgroundColor3 = library.theme.dark,
                    BackgroundTransparency = 0,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, 24),
                    Font = library.theme.font,
                    Text = "",
                    TextColor3 = library.theme.light_text,
                    ZIndex = 13
                })
                
                local option_text = library:create("TextLabel", {
                    Parent = option_button,
                    Name = "Text",
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 0),
                    Size = UDim2.new(1, -10, 1, 0),
                    Font = library.theme.font,
                    Text = option,
                    TextColor3 = option == dropdown_value and library.theme.accent or library.theme.light_text,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 14
                })
                
                -- Option hover effect
                library:connect(option_button.MouseEnter, function()
                    option_button.BackgroundColor3 = library.theme.accent
                end)
                
                library:connect(option_button.MouseLeave, function()
                    option_button.BackgroundColor3 = library.theme.dark
                end)
                
                -- Option selection
                library:connect(option_button.MouseButton1Click, function()
                    dropdown_value = option
                    selected_value.Text = option
                    
                    -- Update option colors
                    for _, child in pairs(dropdown_content:GetChildren()) do
                        if child:IsA("TextButton") then
                            child.Text.TextColor3 = library.theme.light_text
                        end
                    end
                    option_text.TextColor3 = library.theme.accent
                    
                    -- Close dropdown
                    is_open = false
                    library:tween(dropdown_content, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)})
                    library:tween(dropdown_arrow, TweenInfo.new(0.2), {Rotation = 0})
                    task.wait(0.2)
                    dropdown_content.Visible = false
                    dropdown_container.Size = UDim2.new(1, 0, 0, 52)
                    
                    if flag then
                        library.flags[flag] = dropdown_value
                    end
                    
                    if callback then
                        callback(dropdown_value)
                    end
                end)
            end
            
            -- Calculate content height based on options
            local content_height = #options * 26
            
            -- Toggle dropdown
            library:connect(dropdown_button.MouseButton1Click, function()
                is_open = not is_open
                
                if is_open then
                    dropdown_content.Visible = true
                    dropdown_container.ClipsDescendants = false
                    library:tween(dropdown_content, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, content_height)})
                    library:tween(dropdown_arrow, TweenInfo.new(0.2), {Rotation = 180})
                    dropdown_container.Size = UDim2.new(1, 0, 0, 52 + content_height)
                else
                    library:tween(dropdown_content, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)})
                    library:tween(dropdown_arrow, TweenInfo.new(0.2), {Rotation = 0})
                    task.wait(0.2)
                    dropdown_content.Visible = false
                    dropdown_container.Size = UDim2.new(1, 0, 0, 52)
                    dropdown_container.ClipsDescendants = true
                end
            end)
            
            if flag then
                library.flags[flag] = dropdown_value
            end
            
            return {
                container = dropdown_container,
                set_value = function(self, value)
                    if table.find(options, value) then
                        dropdown_value = value
                        selected_value.Text = value
                        
                        -- Update option colors
                        for _, child in pairs(dropdown_content:GetChildren()) do
                            if child:IsA("TextButton") and child.Name == "Option_"..value then
                                child.Text.TextColor3 = library.theme.accent
                            elseif child:IsA("TextButton") then
                                child.Text.TextColor3 = library.theme.light_text
                            end
                        end
                        
                        if flag then
                            library.flags[flag] = dropdown_value
                        end
                        
                        if callback then
                            callback(dropdown_value)
                        end
                    end
                end,
                get_value = function()
                    return dropdown_value
                end,
                add_option = function(self, option)
                    if not table.find(options, option) then
                        table.insert(options, option)
                        
                        local option_button = library:create("TextButton", {
                            Parent = dropdown_content,
                            Name = "Option_"..option,
                            BackgroundColor3 = library.theme.dark,
                            BackgroundTransparency = 0,
                            BorderSizePixel = 0,
                            Size = UDim2.new(1, 0, 0, 24),
                            Font = library.theme.font,
                            Text = "",
                            TextColor3 = library.theme.light_text,
                            ZIndex = 13
                        })
                        
                        local option_text = library:create("TextLabel", {
                            Parent = option_button,
                            Name = "Text",
                            BackgroundTransparency = 1,
                            Position = UDim2.new(0, 10, 0, 0),
                            Size = UDim2.new(1, -10, 1, 0),
                            Font = library.theme.font,
                            Text = option,
                            TextColor3 = library.theme.light_text,
                            TextSize = 14,
                            TextXAlignment = Enum.TextXAlignment.Left,
                            ZIndex = 14
                        })
                        
                        -- Option hover effect
                        library:connect(option_button.MouseEnter, function()
                            option_button.BackgroundColor3 = library.theme.accent
                        end)
                        
                        library:connect(option_button.MouseLeave, function()
                            option_button.BackgroundColor3 = library.theme.dark
                        end)
                        
                        -- Option selection
                        library:connect(option_button.MouseButton1Click, function()
                            dropdown_value = option
                            selected_value.Text = option
                            
                            -- Update option colors
                            for _, child in pairs(dropdown_content:GetChildren()) do
                                if child:IsA("TextButton") then
                                    child.Text.TextColor3 = library.theme.light_text
                                end
                            end
                            option_text.TextColor3 = library.theme.accent
                            
                            -- Close dropdown
                            is_open = false
                            library:tween(dropdown_content, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)})
                            library:tween(dropdown_arrow, TweenInfo.new(0.2), {Rotation = 0})
                            task.wait(0.2)
                            dropdown_content.Visible = false
                            dropdown_container.Size = UDim2.new(1, 0, 0, 52)
                            
                            if flag then
                                library.flags[flag] = dropdown_value
                            end
                            
                            if callback then
                                callback(dropdown_value)
                            end
                        end)
                        
                        -- Update content height
                        content_height = #options * 26
                    end
                end,
                remove_option = function(self, option)
                    local index = table.find(options, option)
                    if index then
                        table.remove(options, index)
                        
                        -- Remove option button
                        for _, child in pairs(dropdown_content:GetChildren()) do
                            if child.Name == "Option_"..option then
                                child:Destroy()
                                break
                            end
                        end
                        
                        -- Update content height
                        content_height = #options * 26
                        
                        -- Update selected value if removed option was selected
                        if dropdown_value == option then
                            dropdown_value = options[1] or ""
                            selected_value.Text = dropdown_value
                            
                            if flag then
                                library.flags[flag] = dropdown_value
                            end
                            
                            if callback then
                                callback(dropdown_value)
                            end
                        end
                    end
                end
            }
        end
        
        -- Create Text Box
        function section:add_textbox(textbox_text, default, placeholder, flag, callback)
            local textbox_value = default or ""
            
            local textbox_container = library:create("Frame", {
                Parent = section_content,
                Name = textbox_text.."TextBox",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 50),
                ZIndex = 9
            })
            
            local textbox_label = library:create("TextLabel", {
                Parent = textbox_container,
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -20, 0, 20),
                Font = library.theme.font,
                Text = textbox_text,
                TextColor3 = library.theme.light_text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 10
            })
            
            local textbox_outline = library:create("Frame", {
                Parent = textbox_container,
                Name = "Outline",
                BackgroundColor3 = library.theme.dark,
                BorderColor3 = library.theme.outline,
                Position = UDim2.new(0, 0, 0, 20),
                Size = UDim2.new(1, 0, 0, 30),
                ZIndex = 10
            })
            
            local textbox = library:create("TextBox", {
                Parent = textbox_outline,
                Name = "Input",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -20, 1, 0),
                Font = library.theme.font,
                Text = textbox_value,
                PlaceholderText = placeholder or "",
                TextColor3 = library.theme.light_text,
                PlaceholderColor3 = library.theme.dark_text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ClearTextOnFocus = false,
                ZIndex = 11
            })
            
            if flag then
                library.flags[flag] = textbox_value
            end
            
            -- Text change handling
            library:connect(textbox.FocusLost, function(enter_pressed)
                textbox_value = textbox.Text
                
                if flag then
                    library.flags[flag] = textbox_value
                end
                
                if callback then
                    callback(textbox_value, enter_pressed)
                end
            end)
            
            -- Selection and focus effects
            library:connect(textbox.Focused, function()
                library:tween(textbox_outline, TweenInfo.new(0.2), {BorderColor3 = library.theme.accent})
            end)
            
            library:connect(textbox.FocusLost, function()
                library:tween(textbox_outline, TweenInfo.new(0.2), {BorderColor3 = library.theme.outline})
            end)
            
            return {
                container = textbox_container,
                set_value = function(self, value)
                    textbox_value = value
                    textbox.Text = value
                    
                    if flag then
                        library.flags[flag] = textbox_value
                    end
                    
                    if callback then
                        callback(textbox_value, false)
                    end
                end,
                get_value = function()
                    return textbox_value
                end
            }
        end
        
        -- Create Key Selector
        function section:add_keybind(keybind_text, default, flag, callback, change_callback)
            local keybind_value = default or Enum.KeyCode.Unknown
            local is_listening = false
            
            local keybind_container = library:create("Frame", {
                Parent = section_content,
                Name = keybind_text.."KeyBind",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 32),
                ZIndex = 9
            })
            
            local keybind_label = library:create("TextLabel", {
                Parent = keybind_container,
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -140, 1, 0),
                Font = library.theme.font,
                Text = keybind_text,
                TextColor3 = library.theme.light_text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 10
            })
            
            local keybind_outline = library:create("Frame", {
                Parent = keybind_container,
                Name = "Outline",
                BackgroundColor3 = library.theme.dark,
                BorderColor3 = library.theme.outline,
                Position = UDim2.new(1, -130, 0.5, -12),
                Size = UDim2.new(0, 120, 0, 24),
                ZIndex = 10
            })
            
            local keybind_text_label = library:create("TextLabel", {
                Parent = keybind_outline,
                Name = "Value",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Font = library.theme.font,
                Text = keybind_value.Name == "Unknown" and "None" or keybind_value.Name,
                TextColor3 = library.theme.light_text,
                TextSize = 14,
                ZIndex = 11
            })
            
            -- Store keybind in registry
            if flag then
                library.flags[flag] = keybind_value
                library.keybinds[flag] = {
                    key = keybind_value,
                    callback = callback
                }
            end
            
            -- Keybind listening logic
            local function start_listening()
                is_listening = true
                keybind_text_label.Text = "..."
                library:tween(keybind_outline, TweenInfo.new(0.2), {BorderColor3 = library.theme.accent})
            end
            
            local function stop_listening()
                is_listening = false
                keybind_text_label.Text = keybind_value.Name == "Unknown" and "None" or keybind_value.Name
                library:tween(keybind_outline, TweenInfo.new(0.2), {BorderColor3 = library.theme.outline})
            end
            
            -- Click to start listening
            library:connect(keybind_outline.InputBegan, function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    if not is_listening then
                        start_listening()
                    else
                        stop_listening()
                    end
                end
            end)
            
            -- Listen for key press
            library:connect(game:GetService("UserInputService").InputBegan, function(input)
                if is_listening and input.UserInputType == Enum.UserInputType.Keyboard then
                    keybind_value = input.KeyCode
                    
                    if flag then
                        library.flags[flag] = keybind_value
                        library.keybinds[flag].key = keybind_value
                    end
                    
                    if change_callback then
                        change_callback(keybind_value)
                    end
                    
                    stop_listening()
                elseif not is_listening and input.UserInputType == Enum.UserInputType.Keyboard then
                    if input.KeyCode == keybind_value and callback then
                        callback(keybind_value)
                    end
                end
            end)
            
            return {
                container = keybind_container,
                set_value = function(self, value)
                    keybind_value = value
                    keybind_text_label.Text = keybind_value.Name == "Unknown" and "None" or keybind_value.Name
                    
                    if flag then
                        library.flags[flag] = keybind_value
                        library.keybinds[flag].key = keybind_value
                    end
                    
                    if change_callback then
                        change_callback(keybind_value)
                    end
                end,
                get_value = function()
                    return keybind_value
                end
            }
        end
        
        -- Create Color Picker
        function section:add_colorpicker(colorpicker_text, default, flag, callback)
            local color_value = default or Color3.fromRGB(255, 255, 255)
            local is_open = false
            
            local colorpicker_container = library:create("Frame", {
                Parent = section_content,
                Name = colorpicker_text.."ColorPicker",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 32),
                ZIndex = 9
            })
            
            local colorpicker_label = library:create("TextLabel", {
                Parent = colorpicker_container,
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -100, 1, 0),
                Font = library.theme.font,
                Text = colorpicker_text,
                TextColor3 = library.theme.light_text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 10
            })
            
            local colorpicker_display = library:create("Frame", {
                Parent = colorpicker_container,
                Name = "Display",
                BackgroundColor3 = color_value,
                BorderColor3 = library.theme.outline,
                Position = UDim2.new(1, -80, 0.5, -12),
                Size = UDim2.new(0, 70, 0, 24),
                ZIndex = 10
            })
            
            -- Color picker popup
            local colorpicker_popup = library:create("Frame", {
                Parent = colorpicker_container,
                Name = "Popup",
                BackgroundColor3 = library.theme.background,
                BorderColor3 = library.theme.outline,
                Position = UDim2.new(1, -240, 0, 35),
                Size = UDim2.new(0, 230, 0, 200),
                Visible = false,
                ZIndex = 15
            })
            
            -- Add HSV color picker elements here
            -- (Simplified version - would need to be expanded for a full implementation)
            local color_h = 0
            local color_s = 1
            local color_v = 1
            
            local color_canvas = library:create("ImageLabel", {
                Parent = colorpicker_popup,
                Name = "Canvas",
                BackgroundColor3 = Color3.fromHSV(color_h, 1, 1),
                Position = UDim2.new(0, 10, 0, 10),
                Size = UDim2.new(0, 150, 0, 150),
                Image = "rbxassetid://4155801252",
                ZIndex = 16
            })
            
            local color_indicator = library:create("Frame", {
                Parent = color_canvas,
                Name = "Indicator",
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Position = UDim2.new(1, -5, 0, -5),
                Size = UDim2.new(0, 10, 0, 10),
                ZIndex = 17,
                AnchorPoint = Vector2.new(0.5, 0.5)
            })
            
            local hue_slider = library:create("Frame", {
                Parent = colorpicker_popup,
                Name = "HueSlider",
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderColor3 = library.theme.outline,
                Position = UDim2.new(0, 170, 0, 10),
                Size = UDim2.new(0, 20, 0, 150),
                ZIndex = 16
            })
            
            -- Hue gradient
            local hue_gradient = library:create("UIGradient", {
                Parent = hue_slider,
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                    ColorSequenceKeypoint.new(1/6, Color3.fromRGB(255, 255, 0)),
                    ColorSequenceKeypoint.new(2/6, Color3.fromRGB(0, 255, 0)),
                    ColorSequenceKeypoint.new(3/6, Color3.fromRGB(0, 255, 255)),
                    ColorSequenceKeypoint.new(4/6, Color3.fromRGB(0, 0, 255)),
                    ColorSequenceKeypoint.new(5/6, Color3.fromRGB(255, 0, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
                }),
                Rotation = 90
            })
            
            local hue_indicator = library:create("Frame", {
                Parent = hue_slider,
                Name = "Indicator",
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderColor3 = Color3.fromRGB(0, 0, 0),
                Position = UDim2.new(0, -5, 0, 0),
                Size = UDim2.new(0, 30, 0, 5),
                ZIndex = 17,
                AnchorPoint = Vector2.new(0, 0.5)
            })
            
            local color_display = library:create("Frame", {
                Parent = colorpicker_popup,
                Name = "Display",
                BackgroundColor3 = color_value,
                BorderColor3 = library.theme.outline,
                Position = UDim2.new(0, 10, 0, 170),
                Size = UDim2.new(0, 180, 0, 20),
                ZIndex = 16
            })
            
            if flag then
                library.flags[flag] = color_value
            end
            
            -- Functions for color conversion and updating
            local function update_color()
                local color = Color3.fromHSV(color_h, color_s, color_v)
                color_value = color
                colorpicker_display.BackgroundColor3 = color
                color_display.BackgroundColor3 = color
                color_canvas.BackgroundColor3 = Color3.fromHSV(color_h, 1, 1)
                
                if flag then
                    library.flags[flag] = color_value
                end
                
                if callback then
                    callback(color_value)
                end
            end
            
            local function update_color_from_canvas(input)
                local relative_x = math.clamp((input.Position.X - color_canvas.AbsolutePosition.X) / color_canvas.AbsoluteSize.X, 0, 1)
                local relative_y = math.clamp((input.Position.Y - color_canvas.AbsolutePosition.Y) / color_canvas.AbsoluteSize.Y, 0, 1)
                
                color_s = relative_x
                color_v = 1 - relative_y
                
                color_indicator.Position = UDim2.new(relative_x, 0, relative_y, 0)
                update_color()
            end
            
            local function update_hue_from_slider(input)
                local relative_y = math.clamp((input.Position.Y - hue_slider.AbsolutePosition.Y) / hue_slider.AbsoluteSize.Y, 0, 1)
                
                color_h = 1 - relative_y
                hue_indicator.Position = UDim2.new(0, -5, relative_y, 0)
                
                update_color()
            end
            
            -- Canvas interactions
            library:connect(color_canvas.InputBegan, function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    update_color_from_canvas(input)
                    
                    local drag_connection
                    drag_connection = game:GetService("UserInputService").InputChanged:Connect(function(drag_input)
                        if drag_input.UserInputType == Enum.UserInputType.MouseMovement then
                            update_color_from_canvas(drag_input)
                        end
                    end)
                    
                    library:connect(game:GetService("UserInputService").InputEnded, function(end_input)
                        if end_input.UserInputType == Enum.UserInputType.MouseButton1 then
                            if drag_connection then
                                drag_connection:Disconnect()
                            end
                        end
                    end)
                end
            end)
            
            -- Hue slider interactions
            library:connect(hue_slider.InputBegan, function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    update_hue_from_slider(input)
                    
                    local drag_connection
                    drag_connection = game:GetService("UserInputService").InputChanged:Connect(function(drag_input)
                        if drag_input.UserInputType == Enum.UserInputType.MouseMovement then
                            update_hue_from_slider(drag_input)
                        end
                    end)
                    
                    library:connect(game:GetService("UserInputService").InputEnded, function(end_input)
                        if end_input.UserInputType == Enum.UserInputType.MouseButton1 then
                            if drag_connection then
                                drag_connection:Disconnect()
                            end
                        end
                    end)
                end
            end)
            
            -- Toggle color picker popup
            library:connect(colorpicker_display.InputBegan, function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    is_open = not is_open
                    colorpicker_popup.Visible = is_open
                end
            end)
            
            -- Click outside to close
            library:connect(game:GetService("UserInputService").InputBegan, function(input)
                if is_open and input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local mouse_position = game:GetService("UserInputService"):GetMouseLocation()
                    local popup_position = colorpicker_popup.AbsolutePosition
                    local popup_size = colorpicker_popup.AbsoluteSize
                    
                    if mouse_position.X < popup_position.X or 
                       mouse_position.Y < popup_position.Y or
                       mouse_position.X > popup_position.X + popup_size.X or
                       mouse_position.Y > popup_position.Y + popup_size.Y then
                        if not (mouse_position.X >= colorpicker_display.AbsolutePosition.X and
                                mouse_position.Y >= colorpicker_display.AbsolutePosition.Y and
                                mouse_position.X <= colorpicker_display.AbsolutePosition.X + colorpicker_display.AbsoluteSize.X and
                                mouse_position.Y <= colorpicker_display.AbsolutePosition.Y + colorpicker_display.AbsoluteSize.Y) then
                            is_open = false
                            colorpicker_popup.Visible = false
                        end
                    end
                end
            end)
            
            return {
                container = colorpicker_container,
                set_value = function(self, color)
                    color_value = color
                    colorpicker_display.BackgroundColor3 = color
                    color_display.BackgroundColor3 = color
                    
                    -- Convert to HSV for internal tracking
                    local h, s, v = color:ToHSV()
                    color_h, color_s, color_v = h, s, v
                    
                    -- Update canvas color
                    color_canvas.BackgroundColor3 = Color3.fromHSV(color_h, 1, 1)
                    
                    -- Update indicators
                    color_indicator.Position = UDim2.new(color_s, 0, 1 - color_v, 0)
                    hue_indicator.Position = UDim2.new(0, -5, 1 - color_h, 0)
                    
                    if flag then
                        library.flags[flag] = color_value
                    end
                    
                    if callback then
                        callback(color_value)
                    end
                end,
                get_value = function()
                    return color_value
                end
            }
        end
        
        -- Create Label
        function section:add_label(text)
            local label_container = library:create("Frame", {
                Parent = section_content,
                Name = "Label",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 20),
                ZIndex = 9
            })
            
            local label = library:create("TextLabel", {
                Parent = label_container,
                Name = "Text",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -20, 1, 0),
                Font = library.theme.font,
                Text = text,
                TextColor3 = library.theme.light_text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 10
            })
            
            return {
                container = label_container,
                set_text = function(self, new_text)
                    label.Text = new_text
                end,
                get_text = function()
                    return label.Text
                end
            }
        end
        
        -- Create Separator
        function section:add_separator()
            local separator_container = library:create("Frame", {
                Parent = section_content,
                Name = "Separator",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 10),
                ZIndex = 9
            })
            
            local separator_line = library:create("Frame", {
                Parent = separator_container,
                Name = "Line",
                BackgroundColor3 = library.theme.outline,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 10, 0.5, 0),
                Size = UDim2.new(1, -20, 0, 1),
                ZIndex = 10
            })
            
            return separator_container
        end
        
        -- Create Progress Bar
        function section:add_progressbar(text, min, max, default, flag, callback)
            local progress_value = default or min or 0
            max = max or 100
            min = min or 0
            
            local progressbar_container = library:create("Frame", {
                Parent = section_content,
                Name = text.."ProgressBar",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 45),
                ZIndex = 9
            })
            
            local progressbar_label = library:create("TextLabel", {
                Parent = progressbar_container,
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -20, 0, 20),
                Font = library.theme.font,
                Text = text,
                TextColor3 = library.theme.light_text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 10
            })
            
            local progressbar_background = library:create("Frame", {
                Parent = progressbar_container,
                Name = "Background",
                BackgroundColor3 = library.theme.dark,
                BorderColor3 = library.theme.outline,
                Position = UDim2.new(0, 10, 0, 25),
                Size = UDim2.new(1, -20, 0, 10),
                ZIndex = 10
            })
            
            local progressbar_fill = library:create("Frame", {
                Parent = progressbar_background,
                Name = "Fill",
                BackgroundColor3 = library.theme.accent,
                BorderSizePixel = 0,
                Size = UDim2.new((progress_value - min) / (max - min), 0, 1, 0),
                ZIndex = 11
            })
            
            local value_display = library:create("TextLabel", {
                Parent = progressbar_background,
                Name = "Value",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Font = library.theme.font,
                Text = tostring(progress_value),
                TextColor3 = library.theme.light_text,
                TextSize = 12,
                ZIndex = 12
            })
            
            -- Apply glow effect to the progress bar
            local glow = library:apply_glow(progressbar_fill, library.theme.accent, UDim2.new(0, -8, 0, -4), UDim2.new(1, 16, 1, 8), 0.85)
            
            if flag then
                library.flags[flag] = progress_value
            end
            
            return {
                container = progressbar_container,
                set_value = function(self, value)
                    value = math.clamp(value, min, max)
                    progress_value = value
                    value_display.Text = tostring(math.floor(value))
                    
                    library:tween(progressbar_fill, TweenInfo.new(0.2), {
                        Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
                    })
                    
                    if flag then
                        library.flags[flag] = value
                    end
                    
                    if callback then
                        callback(value)
                    end
                end,
                get_value = function()
                    return progress_value
                end
            }
        end
        
        -- Create Image Label
        function section:add_image(url, size)
            local image_container = library:create("Frame", {
                Parent = section_content,
                Name = "ImageContainer",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, size or 100),
                ZIndex = 9
            })
            
            local image = library:create("ImageLabel", {
                Parent = image_container,
                Name = "Image",
                BackgroundTransparency = 1,
                Position = UDim2.new(0.5, 0, 0, 0),
                AnchorPoint = Vector2.new(0.5, 0),
                Size = UDim2.new(0, size or 100, 0, size or 100),
                Image = url,
                ScaleType = Enum.ScaleType.Fit,
                ZIndex = 10
            })
            
            return {
                container = image_container,
                set_image = function(self, new_url)
                    image.Image = new_url
                end
            }
        end
        
        -- Create List Box
        function section:add_list(text, items, multiselect, default, flag, callback)
            local list_container = library:create("Frame", {
                Parent = section_content,
                Name = text.."List",
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 140),
                ZIndex = 9
            })
            
            local list_label = library:create("TextLabel", {
                Parent = list_container,
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -20, 0, 20),
                Font = library.theme.font,
                Text = text,
                TextColor3 = library.theme.light_text,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 10
            })
            
            local list_frame = library:create("Frame", {
                Parent = list_container,
                Name = "ListFrame",
                BackgroundColor3 = library.theme.dark,
                BorderColor3 = library.theme.outline,
                Position = UDim2.new(0, 10, 0, 25),
                Size = UDim2.new(1, -20, 0, 100),
                ZIndex = 10
            })
            
            local scroll_frame = library:create("ScrollingFrame", {
                Parent = list_frame,
                Name = "ScrollFrame",
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 2, 0, 2),
                Size = UDim2.new(1, -4, 1, -4),
                ScrollBarThickness = 4,
                ScrollBarImageColor3 = library.theme.accent,
                CanvasSize = UDim2.new(0, 0, 0, 0),
                ZIndex = 11
            })
            
            local list_layout = library:create("UIListLayout", {
                Parent = scroll_frame,
                Padding = UDim.new(0, 2),
                SortOrder = Enum.SortOrder.LayoutOrder
            })
            
            -- Update canvas size as items are added
            library:connect(list_layout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
                scroll_frame.CanvasSize = UDim2.new(0, 0, 0, list_layout.AbsoluteContentSize.Y)
            end)
            
            local selected = {}
            if default then
                if multiselect then
                    for _, item in pairs(default) do
                        selected[item] = true
                    end
                else
                    selected[default] = true
                end
            end
            
            if flag then
                if multiselect then
                    library.flags[flag] = {}
                    for item, _ in pairs(selected) do
                        table.insert(library.flags[flag], item)
                    end
                else
                    for item, _ in pairs(selected) do
                        library.flags[flag] = item
                        break
                    end
                end
            end
            
            local list_items = {}
            
            local function create_item(item_text)
                local item = library:create("TextButton", {
                    Parent = scroll_frame,
                    Name = "Item_"..item_text,
                    BackgroundColor3 = selected[item_text] and library.theme.accent or library.theme.foreground,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, 24),
                    Font = library.theme.font,
                    Text = item_text,
                    TextColor3 = selected[item_text] and Color3.fromRGB(255, 255, 255) or library.theme.light_text,
                    TextSize = 14,
                    ZIndex = 12
                })
                
                library:connect(item.MouseEnter, function()
                    if not selected[item_text] then
                        library:tween(item, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(
                            library.theme.foreground.R * 1.2,
                            library.theme.foreground.G * 1.2,
                            library.theme.foreground.B * 1.2
                        )})
                    end
                end)
                
                library:connect(item.MouseLeave, function()
                    if not selected[item_text] then
                        library:tween(item, TweenInfo.new(0.2), {BackgroundColor3 = library.theme.foreground})
                    end
                end)
                
                library:connect(item.MouseButton1Click, function()
                    if multiselect then
                        selected[item_text] = not selected[item_text]
                        
                        library:tween(item, TweenInfo.new(0.2), {
                            BackgroundColor3 = selected[item_text] and library.theme.accent or library.theme.foreground,
                            TextColor3 = selected[item_text] and Color3.fromRGB(255, 255, 255) or library.theme.light_text
                        })
                        
                        if flag then
                            library.flags[flag] = {}
                            for item_name, is_selected in pairs(selected) do
                                if is_selected then
                                    table.insert(library.flags[flag], item_name)
                                end
                            end
                        end
                        
                        if callback then
                            local selected_items = {}
                            for item_name, is_selected in pairs(selected) do
                                if is_selected then
                                    table.insert(selected_items, item_name)
                                end
                            end
                            callback(selected_items)
                        end
                    else
                        -- Deselect all items
                        for item_name, _ in pairs(selected) do
                            selected[item_name] = false
                            local item_button = scroll_frame:FindFirstChild("Item_"..item_name)
                            if item_button then
                                library:tween(item_button, TweenInfo.new(0.2), {
                                    BackgroundColor3 = library.theme.foreground,
                                    TextColor3 = library.theme.light_text
                                })
                            end
                        end
                        
                        -- Select only this item
                        selected[item_text] = true
                        library:tween(item, TweenInfo.new(0.2), {
                            BackgroundColor3 = library.theme.accent,
                            TextColor3 = Color3.fromRGB(255, 255, 255)
                        })
                        
                        if flag then
                            library.flags[flag] = item_text
                        end
                        
                        if callback then
                            callback(item_text)
                        end
                    end
                end)
                
                return item
            end
            
            -- Add initial items
            for _, item in ipairs(items) do
                list_items[item] = create_item(item)
            end
            
            return {
                container = list_container,
                add_item = function(self, item)
                    if not list_items[item] then
                        list_items[item] = create_item(item)
                    end
                end,
                remove_item = function(self, item)
                    if list_items[item] then
                        list_items[item]:Destroy()
                        list_items[item] = nil
                        
                        if selected[item] then
                            selected[item] = nil
                            
                            if flag then
                                if multiselect then
                                    library.flags[flag] = {}
                                    for item_name, is_selected in pairs(selected) do
                                        if is_selected then
                                            table.insert(library.flags[flag], item_name)
                                        end
                                    end
                                else
                                    library.flags[flag] = nil
                                end
                            end
                            
                            if callback then
                                if multiselect then
                                    local selected_items = {}
                                    for item_name, is_selected in pairs(selected) do
                                        if is_selected then
                                            table.insert(selected_items, item_name)
                                        end
                                    end
                                    callback(selected_items)
                                else
                                    callback(nil)
                                end
                            end
                        end
                    end
                end,
                clear = function(self)
                    for item, button in pairs(list_items) do
                        button:Destroy()
                    end
                    list_items = {}
                    selected = {}
                    
                    if flag then
                        if multiselect then
                            library.flags[flag] = {}
                        else
                            library.flags[flag] = nil
                        end
                    end
                    
                    if callback then
                        if multiselect then
                            callback({})
                        else
                            callback(nil)
                        end
                    end
                end,
                set_value = function(self, value)
                    if multiselect and type(value) == "table" then
                        -- Clear all selections
                        for item, _ in pairs(selected) do
                            selected[item] = false
                            local item_button = scroll_frame:FindFirstChild("Item_"..item)
                            if item_button then
                                library:tween(item_button, TweenInfo.new(0.2), {
                                    BackgroundColor3 = library.theme.foreground,
                                    TextColor3 = library.theme.light_text
                                })
                            end
                        end
                        
                        -- Set new selections
                        for _, item in ipairs(value) do
                            selected[item] = true
                            local item_button = scroll_frame:FindFirstChild("Item_"..item)
                            if item_button then
                                library:tween(item_button, TweenInfo.new(0.2), {
                                    BackgroundColor3 = library.theme.accent,
                                    TextColor3 = Color3.fromRGB(255, 255, 255)
                                })
                            end
                        end
                        
                        if flag then
                            library.flags[flag] = value
                        end
                        
                        if callback then
                            callback(value)
                        end
                    elseif not multiselect and type(value) == "string" then
                        -- Clear all selections
                        for item, _ in pairs(selected) do
                            selected[item] = false
                            local item_button = scroll_frame:FindFirstChild("Item_"..item)
                            if item_button then
                                library:tween(item_button, TweenInfo.new(0.2), {
                                    BackgroundColor3 = library.theme.foreground,
                                    TextColor3 = library.theme.light_text
                                })
                            end
                        end
                        
                        -- Set new selection
                        selected[value] = true
                        local item_button = scroll_frame:FindFirstChild("Item_"..value)
                        if item_button then
                            library:tween(item_button, TweenInfo.new(0.2), {
                                BackgroundColor3 = library.theme.accent,
                                TextColor3 = Color3.fromRGB(255, 255, 255)
                            })
                        end
                        
                        if flag then
                            library.flags[flag] = value
                        end
                        
                        if callback then
                            callback(value)
                        end
                    end
                end,
                get_value = function()
                    if multiselect then
                        local selected_items = {}
                        for item, is_selected in pairs(selected) do
                            if is_selected then
                                table.insert(selected_items, item)
                            end
                        end
                        return selected_items
                    else
                        for item, is_selected in pairs(selected) do
                            if is_selected then
                                return item
                            end
                        end
                        return nil
                    end
                end
            }
        end
        
        return section
    end
    
    return tab
end

-- Select Tab function
function library:select_tab(tab_name)
    if self.selected_tab == tab_name then return end
    
    -- Hide all tab pages
    for name, page in pairs(self.tab_pages) do
        page.Visible = false
    end
    
    -- Reset all tab button styles
    for name, button in pairs(self.tab_buttons) do
        button.TextColor3 = self.theme.dark_text
        button.SelectedIndicator.Visible = false
    end
    
    -- Show selected tab
    if self.tab_pages[tab_name] then
        self.tab_pages[tab_name].Visible = true
    end
    
    -- Update selected tab button
    if self.tab_buttons[tab_name] then
        self.tab_buttons[tab_name].TextColor3 = self.theme.accent
        self.tab_buttons[tab_name].SelectedIndicator.Visible = true
    end
    
    self.selected_tab = tab_name
end

-- Change theme function
function library:set_theme(new_theme)
    for key, value in pairs(new_theme) do
        if self.theme[key] then
            self.theme[key] = value
        end
    end
    
    -- Update UI with new theme (would need to update all elements)
    -- This would be a complex implementation to update all UI elements
    -- For simplicity, we'll just recommend recreating the UI with the new theme
end

-- Get flag value
function library:get_flag(flag)
    return self.flags[flag]
end

-- Set flag value
function library:set_flag(flag, value)
    self.flags[flag] = value
    -- This doesn't update the UI element, would need to implement that separately
end

-- Load Configuration
function library:load_config(config)
    for flag, value in pairs(config) do
        self.flags[flag] = value
        -- Would need to update UI elements as well
    end
end

-- Save Configuration
function library:save_config()
    return self.flags
end

-- Show notification
function library:notify(title, message, duration)
    duration = duration or 3
    
    local notification = self:create("Frame", {
        Parent = self.gui,
        Name = "Notification",
        BackgroundColor3 = self.theme.dark,
        BorderColor3 = self.theme.accent,
        Position = UDim2.new(1, -320, 1, -100),
        Size = UDim2.new(0, 300, 0, 80),
        ZIndex = 100
    })
    
    -- Apply glow effect
    self:apply_glow(notification, self.theme.accent)
    
    local notif_title = self:create("TextLabel", {
        Parent = notification,
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 5),
        Size = UDim2.new(1, -20, 0, 20),
        Font = self.theme.font,
        Text = title,
        TextColor3 = self.theme.accent,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 101
    })
    
    local notif_message = self:create("TextLabel", {
        Parent = notification,
        Name = "Message",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 30),
        Size = UDim2.new(1, -20, 0, 40),
        Font = self.theme.font,
        Text = message,
        TextColor3 = self.theme.light_text,
        TextSize = 14,
        TextWrapped = true,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        ZIndex = 101
    })
    
    -- Animate in
    notification.Position = UDim2.new(1, 0, 1, -100)
    self:tween(notification, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {
        Position = UDim2.new(1, -320, 1, -100)
    })
    
    -- Animate out after duration
    task.delay(duration, function()
        self:tween(notification, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {
            Position = UDim2.new(1, 0, 1, -100)
        }).Completed:Connect(function()
            notification:Destroy()
        end)
    end)
    
    return notification
end

-- Create Example Window with Tabs
