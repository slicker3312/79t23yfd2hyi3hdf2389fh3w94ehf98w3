-- Modern UI Library for Roblox Exploiting
-- Inspired by Splix/BBot styling
-- Created by Claude

local library = {}
local UIElements = {}
local windowCount = 0
local activeWindow = nil
local selectedTab = nil
local connections = {}
local dragOffset = nil
local dragging = false

-- Create a user interface window
function library:CreateWindow(title)
    -- Clear any existing GUIs with same name
    for _, v in pairs(game:GetService("CoreGui"):GetChildren()) do
        if v.Name == "ModernUILibrary" then
            v:Destroy()
        end
    end
    
    windowCount = windowCount + 1
    
    -- Create main GUI components
    local ModernUILibrary = Instance.new("ScreenGui")
    local Main = Instance.new("Frame")
    local UICorner = Instance.new("UICorner")
    local Topbar = Instance.new("Frame")
    local TopbarUICorner = Instance.new("UICorner")
    local Title = Instance.new("TextLabel")
    local CloseButton = Instance.new("TextButton")
    local TabContainer = Instance.new("Frame")
    local TabUICorner = Instance.new("UICorner")
    local TabList = Instance.new("Frame")
    local TabUIListLayout = Instance.new("UIListLayout")
    local ContentContainer = Instance.new("Frame")
    local Shadow = Instance.new("ImageLabel")
    
    -- Configure ScreenGui
    ModernUILibrary.Name = "ModernUILibrary"
    ModernUILibrary.Parent = game:GetService("CoreGui")
    ModernUILibrary.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Configure Main Frame
    Main.Name = "Main"
    Main.Parent = ModernUILibrary
    Main.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
    Main.BorderSizePixel = 0
    Main.Position = UDim2.new(0.5, -300, 0.5, -175)
    Main.Size = UDim2.new(0, 600, 0, 350)
    Main.ClipsDescendants = true
    
    Shadow.Name = "Shadow"
    Shadow.Parent = Main
    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    Shadow.BackgroundTransparency = 1
    Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    Shadow.Size = UDim2.new(1, 40, 1, 40)
    Shadow.Image = "rbxassetid://6014261993"
    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    Shadow.ImageTransparency = 0.5
    Shadow.ScaleType = Enum.ScaleType.Slice
    Shadow.SliceCenter = Rect.new(49, 49, 450, 450)
    Shadow.ZIndex = 0
    
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = Main
    
    -- Configure Top Bar
    Topbar.Name = "Topbar"
    Topbar.Parent = Main
    Topbar.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
    Topbar.Size = UDim2.new(1, 0, 0, 40)
    
    TopbarUICorner.CornerRadius = UDim.new(0, 8)
    TopbarUICorner.Parent = Topbar
    
    Title.Name = "Title"
    Title.Parent = Topbar
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 15, 0, 0)
    Title.Size = UDim2.new(0, 200, 1, 0)
    Title.Font = Enum.Font.GothamBold
    Title.Text = title or "Modern UI Library"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 16
    Title.TextXAlignment = Enum.TextXAlignment.Left
    
    CloseButton.Name = "CloseButton"
    CloseButton.Parent = Topbar
    CloseButton.BackgroundTransparency = 1
    CloseButton.Position = UDim2.new(1, -40, 0, 0)
    CloseButton.Size = UDim2.new(0, 40, 0, 40)
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Color3.fromRGB(255, 80, 80)
    CloseButton.TextSize = 18
    
    -- Configure Tab Container
    TabContainer.Name = "TabContainer"
    TabContainer.Parent = Main
    TabContainer.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
    TabContainer.Position = UDim2.new(0, 10, 0, 50)
    TabContainer.Size = UDim2.new(0, 140, 0, 290)
    
    TabUICorner.CornerRadius = UDim.new(0, 6)
    TabUICorner.Parent = TabContainer
    
    TabList.Name = "TabList"
    TabList.Parent = TabContainer
    TabList.BackgroundTransparency = 1
    TabList.Position = UDim2.new(0, 5, 0, 5)
    TabList.Size = UDim2.new(1, -10, 1, -10)
    
    TabUIListLayout.Name = "TabUIListLayout"
    TabUIListLayout.Parent = TabList
    TabUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabUIListLayout.Padding = UDim.new(0, 8)
    
    -- Configure Content Container
    ContentContainer.Name = "ContentContainer"
    ContentContainer.Parent = Main
    ContentContainer.BackgroundTransparency = 1
    ContentContainer.Position = UDim2.new(0, 160, 0, 50)
    ContentContainer.Size = UDim2.new(0, 430, 0, 290)
    
    -- Make window draggable
    local function updateDrag(input)
        if dragging and dragOffset then
            local newPosition = UDim2.new(0, input.Position.X - dragOffset.X, 0, input.Position.Y - dragOffset.Y)
            game:GetService("TweenService"):Create(Main, TweenInfo.new(0.1), {Position = newPosition}):Play()
        end
    end
    
    connections[#connections+1] = Topbar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragOffset = Vector2.new(input.Position.X - Main.AbsolutePosition.X, input.Position.Y - Main.AbsolutePosition.Y)
        end
    end)
    
    connections[#connections+1] = Topbar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
            dragOffset = nil
        end
    end)
    
    connections[#connections+1] = game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            updateDrag(input)
        end
    end)
    
    -- Close button functionality
    connections[#connections+1] = CloseButton.MouseButton1Click:Connect(function()
        for _, connection in pairs(connections) do
            connection:Disconnect()
        end
        ModernUILibrary:Destroy()
    end)
    
    local window = {}
    local tabs = {}
    local tabContentFrames = {}
    
    -- Create tab function
    function window:CreateTab(tabName)
        -- Create tab button
        local TabButton = Instance.new("TextButton")
        local TabButtonUICorner = Instance.new("UICorner")
        
        TabButton.Name = "TabButton_" .. tabName
        TabButton.Parent = TabList
        TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
        TabButton.Size = UDim2.new(1, 0, 0, 36)
        TabButton.Font = Enum.Font.GothamSemibold
        TabButton.Text = tabName
        TabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
        TabButton.TextSize = 14
        TabButton.AutoButtonColor = false
        
        TabButtonUICorner.CornerRadius = UDim.new(0, 6)
        TabButtonUICorner.Parent = TabButton
        
        -- Create content frame for the tab
        local TabContent = Instance.new("ScrollingFrame")
        local TabContentUIListLayout = Instance.new("UIListLayout")
        local TabContentPadding = Instance.new("UIPadding")
        
        TabContent.Name = "TabContent_" .. tabName
        TabContent.Parent = ContentContainer
        TabContent.BackgroundTransparency = 1
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.ScrollBarThickness = 2
        TabContent.ScrollBarImageColor3 = Color3.fromRGB(70, 70, 75)
        TabContent.Visible = false
        TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabContent.BorderSizePixel = 0
        TabContent.ScrollingDirection = Enum.ScrollingDirection.Y
        TabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
        
        TabContentUIListLayout.Name = "TabContentUIListLayout"
        TabContentUIListLayout.Parent = TabContent
        TabContentUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        TabContentUIListLayout.Padding = UDim.new(0, 8)
        
        TabContentPadding.Name = "TabContentPadding"
        TabContentPadding.Parent = TabContent
        TabContentPadding.PaddingTop = UDim.new(0, 10)
        TabContentPadding.PaddingLeft = UDim.new(0, 10)
        TabContentPadding.PaddingRight = UDim.new(0, 10)
        TabContentPadding.PaddingBottom = UDim.new(0, 10)
        
        table.insert(tabs, TabButton)
        tabContentFrames[TabButton] = TabContent
        
        -- Select first tab by default
        if #tabs == 1 then
            TabButton.BackgroundColor3 = Color3.fromRGB(65, 105, 225)
            TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            TabContent.Visible = true
            selectedTab = TabButton
        end
        
        -- Tab button click handler
        connections[#connections+1] = TabButton.MouseButton1Click:Connect(function()
            if selectedTab == TabButton then return end
            
            -- Deselect previous tab
            if selectedTab then
                game:GetService("TweenService"):Create(selectedTab, TweenInfo.new(0.2), {
                    BackgroundColor3 = Color3.fromRGB(50, 50, 55),
                    TextColor3 = Color3.fromRGB(200, 200, 200)
                }):Play()
                tabContentFrames[selectedTab].Visible = false
            end
            
            -- Select new tab
            game:GetService("TweenService"):Create(TabButton, TweenInfo.new(0.2), {
                BackgroundColor3 = Color3.fromRGB(65, 105, 225),
                TextColor3 = Color3.fromRGB(255, 255, 255)
            }):Play()
            TabContent.Visible = true
            selectedTab = TabButton
        end)
        
        -- Hover effect
        connections[#connections+1] = TabButton.MouseEnter:Connect(function()
            if selectedTab ~= TabButton then
                game:GetService("TweenService"):Create(TabButton, TweenInfo.new(0.2), {
                    BackgroundColor3 = Color3.fromRGB(60, 60, 65)
                }):Play()
            end
        end)
        
        connections[#connections+1] = TabButton.MouseLeave:Connect(function()
            if selectedTab ~= TabButton then
                game:GetService("TweenService"):Create(TabButton, TweenInfo.new(0.2), {
                    BackgroundColor3 = Color3.fromRGB(50, 50, 55)
                }):Play()
            end
        end)
        
        local tab = {}
        
        -- Add a section to the tab
        function tab:AddSection(sectionName)
            local Section = Instance.new("Frame")
            local SectionTitle = Instance.new("TextLabel")
            local SectionContent = Instance.new("Frame")
            local SectionUICorner = Instance.new("UICorner")
            local SectionUIListLayout = Instance.new("UIListLayout")
            
            Section.Name = "Section_" .. sectionName
            Section.Parent = TabContent
            Section.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
            Section.Size = UDim2.new(1, 0, 0, 36)
            Section.AutomaticSize = Enum.AutomaticSize.Y
            
            SectionUICorner.CornerRadius = UDim.new(0, 6)
            SectionUICorner.Parent = Section
            
            SectionTitle.Name = "SectionTitle"
            SectionTitle.Parent = Section
            SectionTitle.BackgroundTransparency = 1
            SectionTitle.Position = UDim2.new(0, 10, 0, 0)
            SectionTitle.Size = UDim2.new(1, -20, 0, 36)
            SectionTitle.Font = Enum.Font.GothamSemibold
            SectionTitle.Text = sectionName
            SectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            SectionTitle.TextSize = 14
            SectionTitle.TextXAlignment = Enum.TextXAlignment.Left
            
            SectionContent.Name = "SectionContent"
            SectionContent.Parent = Section
            SectionContent.BackgroundTransparency = 1
            SectionContent.Position = UDim2.new(0, 0, 0, 36)
            SectionContent.Size = UDim2.new(1, 0, 0, 0)
            SectionContent.AutomaticSize = Enum.AutomaticSize.Y
            
            SectionUIListLayout.Name = "SectionUIListLayout"
            SectionUIListLayout.Parent = SectionContent
            SectionUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            SectionUIListLayout.Padding = UDim.new(0, 8)
            
            local section = {}
            
            -- Create a button
            function section:AddButton(buttonText, callback)
                callback = callback or function() end
                
                local Button = Instance.new("Frame")
                local ButtonUICorner = Instance.new("UICorner")
                local ButtonText = Instance.new("TextLabel")
                local ButtonClickArea = Instance.new("TextButton")
                
                Button.Name = "Button_" .. buttonText
                Button.Parent = SectionContent
                Button.BackgroundColor3 = Color3.fromRGB(55, 55, 60)
                Button.Size = UDim2.new(1, 0, 0, 36)
                
                ButtonUICorner.CornerRadius = UDim.new(0, 4)
                ButtonUICorner.Parent = Button
                
                ButtonText.Name = "ButtonText"
                ButtonText.Parent = Button
                ButtonText.BackgroundTransparency = 1
                ButtonText.Position = UDim2.new(0, 10, 0, 0)
                ButtonText.Size = UDim2.new(1, -20, 1, 0)
                ButtonText.Font = Enum.Font.Gotham
                ButtonText.Text = buttonText
                ButtonText.TextColor3 = Color3.fromRGB(255, 255, 255)
                ButtonText.TextSize = 14
                ButtonText.TextXAlignment = Enum.TextXAlignment.Left
                
                ButtonClickArea.Name = "ButtonClickArea"
                ButtonClickArea.Parent = Button
                ButtonClickArea.BackgroundTransparency = 1
                ButtonClickArea.Size = UDim2.new(1, 0, 1, 0)
                ButtonClickArea.Font = Enum.Font.SourceSans
                ButtonClickArea.Text = ""
                ButtonClickArea.TextColor3 = Color3.fromRGB(0, 0, 0)
                ButtonClickArea.TextSize = 14
                
                -- Button click effect
                connections[#connections+1] = ButtonClickArea.MouseButton1Click:Connect(function()
                    -- Ripple effect
                    local ripple = Instance.new("Frame")
                    ripple.Name = "Ripple"
                    ripple.Parent = Button
                    ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    ripple.BackgroundTransparency = 0.8
                    ripple.BorderSizePixel = 0
                    ripple.AnchorPoint = Vector2.new(0.5, 0.5)
                    ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
                    ripple.Size = UDim2.new(0, 0, 0, 0)
                    
                    local rippleUICorner = Instance.new("UICorner")
                    rippleUICorner.CornerRadius = UDim.new(1, 0)
                    rippleUICorner.Parent = ripple
                    
                    game:GetService("TweenService"):Create(ripple, TweenInfo.new(0.5), {
                        Size = UDim2.new(1.5, 0, 1.5, 0),
                        BackgroundTransparency = 1
                    }):Play()
                    
                    game:GetService("Debris"):AddItem(ripple, 0.5)
                    
                    pcall(callback)
                end)
                
                -- Button hover effect
                connections[#connections+1] = ButtonClickArea.MouseEnter:Connect(function()
                    game:GetService("TweenService"):Create(Button, TweenInfo.new(0.2), {
                        BackgroundColor3 = Color3.fromRGB(65, 65, 70)
                    }):Play()
                end)
                
                connections[#connections+1] = ButtonClickArea.MouseLeave:Connect(function()
                    game:GetService("TweenService"):Create(Button, TweenInfo.new(0.2), {
                        BackgroundColor3 = Color3.fromRGB(55, 55, 60)
                    }):Play()
                end)
                
                return Button
            end
            
            -- Create a toggle switch
            function section:AddToggle(toggleText, defaultState, callback)
                defaultState = defaultState or false
                callback = callback or function() end
                
                local Toggle = Instance.new("Frame")
                local ToggleUICorner = Instance.new("UICorner")
                local ToggleText = Instance.new("TextLabel")
                local ToggleButton = Instance.new("Frame")
                local ToggleButtonUICorner = Instance.new("UICorner")
                local ToggleIndicator = Instance.new("Frame")
                local ToggleIndicatorUICorner = Instance.new("UICorner")
                local ToggleClickArea = Instance.new("TextButton")
                
                Toggle.Name = "Toggle_" .. toggleText
                Toggle.Parent = SectionContent
                Toggle.BackgroundColor3 = Color3.fromRGB(55, 55, 60)
                Toggle.Size = UDim2.new(1, 0, 0, 36)
                
                ToggleUICorner.CornerRadius = UDim.new(0, 4)
                ToggleUICorner.Parent = Toggle
                
                ToggleText.Name = "ToggleText"
                ToggleText.Parent = Toggle
                ToggleText.BackgroundTransparency = 1
                ToggleText.Position = UDim2.new(0, 10, 0, 0)
                ToggleText.Size = UDim2.new(1, -60, 1, 0)
                ToggleText.Font = Enum.Font.Gotham
                ToggleText.Text = toggleText
                ToggleText.TextColor3 = Color3.fromRGB(255, 255, 255)
                ToggleText.TextSize = 14
                ToggleText.TextXAlignment = Enum.TextXAlignment.Left
                
                ToggleButton.Name = "ToggleButton"
                ToggleButton.Parent = Toggle
                ToggleButton.AnchorPoint = Vector2.new(1, 0.5)
                ToggleButton.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
                ToggleButton.Position = UDim2.new(1, -10, 0.5, 0)
                ToggleButton.Size = UDim2.new(0, 40, 0, 20)
                
                ToggleButtonUICorner.CornerRadius = UDim.new(1, 0)
                ToggleButtonUICorner.Parent = ToggleButton
                
                ToggleIndicator.Name = "ToggleIndicator"
                ToggleIndicator.Parent = ToggleButton
                ToggleIndicator.AnchorPoint = Vector2.new(0, 0.5)
                ToggleIndicator.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
                ToggleIndicator.Position = UDim2.new(0, 2, 0.5, 0)
                ToggleIndicator.Size = UDim2.new(0, 16, 0, 16)
                
                ToggleIndicatorUICorner.CornerRadius = UDim.new(1, 0)
                ToggleIndicatorUICorner.Parent = ToggleIndicator
                
                ToggleClickArea.Name = "ToggleClickArea"
                ToggleClickArea.Parent = Toggle
                ToggleClickArea.BackgroundTransparency = 1
                ToggleClickArea.Size = UDim2.new(1, 0, 1, 0)
                ToggleClickArea.Font = Enum.Font.SourceSans
                ToggleClickArea.Text = ""
                ToggleClickArea.TextColor3 = Color3.fromRGB(0, 0, 0)
                ToggleClickArea.TextSize = 14
                
                local toggled = defaultState
                
                -- Set initial state
                if toggled then
                    ToggleIndicator.Position = UDim2.new(0, 22, 0.5, 0)
                    ToggleIndicator.BackgroundColor3 = Color3.fromRGB(65, 105, 225)
                    ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 70, 150)
                end
                
                -- Toggle click handler
                connections[#connections+1] = ToggleClickArea.MouseButton1Click:Connect(function()
                    toggled = not toggled
                    
                    if toggled then
                        game:GetService("TweenService"):Create(ToggleIndicator, TweenInfo.new(0.2), {
                            Position = UDim2.new(0, 22, 0.5, 0),
                            BackgroundColor3 = Color3.fromRGB(65, 105, 225)
                        }):Play()
                        
                        game:GetService("TweenService"):Create(ToggleButton, TweenInfo.new(0.2), {
                            BackgroundColor3 = Color3.fromRGB(50, 70, 150)
                        }):Play()
                    else
                        game:GetService("TweenService"):Create(ToggleIndicator, TweenInfo.new(0.2), {
                            Position = UDim2.new(0, 2, 0.5, 0),
                            BackgroundColor3 = Color3.fromRGB(200, 200, 200)
                        }):Play()
                        
                        game:GetService("TweenService"):Create(ToggleButton, TweenInfo.new(0.2), {
                            BackgroundColor3 = Color3.fromRGB(40, 40, 45)
                        }):Play()
                    end
                    
                    pcall(callback, toggled)
                end)
                
                -- Toggle hover effect
                connections[#connections+1] = ToggleClickArea.MouseEnter:Connect(function()
                    game:GetService("TweenService"):Create(Toggle, TweenInfo.new(0.2), {
                        BackgroundColor3 = Color3.fromRGB(65, 65, 70)
                    }):Play()
                end)
                
                connections[#connections+1] = ToggleClickArea.MouseLeave:Connect(function()
                    game:GetService("TweenService"):Create(Toggle, TweenInfo.new(0.2), {
                        BackgroundColor3 = Color3.fromRGB(55, 55, 60)
                    }):Play()
                end)
                
                local toggleObj = {}
                
                function toggleObj:SetState(state)
                    if state == toggled then return end
                    toggled = state
                    
                    if toggled then
                        game:GetService("TweenService"):Create(ToggleIndicator, TweenInfo.new(0.2), {
                            Position = UDim2.new(0, 22, 0.5, 0),
                            BackgroundColor3 = Color3.fromRGB(65, 105, 225)
                        }):Play()
                        
                        game:GetService("TweenService"):Create(ToggleButton, TweenInfo.new(0.2), {
                            BackgroundColor3 = Color3.fromRGB(50, 70, 150)
                        }):Play()
                    else
                        game:GetService("TweenService"):Create(ToggleIndicator, TweenInfo.new(0.2), {
                            Position = UDim2.new(0, 2, 0.5, 0),
                            BackgroundColor3 = Color3.fromRGB(200, 200, 200)
                        }):Play()
                        
                        game:GetService("TweenService"):Create(ToggleButton, TweenInfo.new(0.2), {
                            BackgroundColor3 = Color3.fromRGB(40, 40, 45)
                        }):Play()
                    end
                    
                    pcall(callback, toggled)
                end
                
                function toggleObj:GetState()
                    return toggled
                end
                
                return toggleObj
            end
            
            -- Create a slider
            function section:AddSlider(sliderText, min, max, default, increment, callback)
                min = min or 0
                max = max or 100
                default = default or min
                increment = increment or 1
                callback = callback or function() end
                
                -- Clamp default value
                default = math.clamp(default, min, max)
                
                local Slider = Instance.new("Frame")
                local SliderUICorner = Instance.new("UICorner")
                local SliderText = Instance.new("TextLabel")
                local SliderValue = Instance.new("TextLabel")
                local SliderBackground = Instance.new("Frame")
                local SliderBackgroundUICorner = Instance.new("UICorner")
                local SliderFill = Instance.new("Frame")
                local SliderFillUICorner = Instance.new("UICorner")
                local SliderDrag = Instance.new("TextButton")
                
                Slider.Name = "Slider_" .. sliderText
                Slider.Parent = SectionContent
                Slider.BackgroundColor3 = Color3.fromRGB(55, 55, 60)
                Slider.Size = UDim2.new(1, 0, 0, 50)
                
                SliderUICorner.CornerRadius = UDim.new(0, 4)
                SliderUICorner.Parent = Slider
                
                SliderText.Name = "SliderText"
                SliderText.Parent = Slider
                SliderText.BackgroundTransparency = 1
                SliderText.Position = UDim2.new(0, 10, 0, 0)
                SliderText.Size = UDim2.new(1, -20, 0, 25)
                SliderText.Font = Enum.Font.Gotham
                SliderText.Text = sliderText
                SliderText.TextColor3 = Color3.fromRGB(255, 255, 255)
                SliderText.TextSize = 14
                SliderText.TextXAlignment = Enum.TextXAlignment.Left
                
                SliderValue.Name = "SliderValue"
                SliderValue.Parent = Slider
                SliderValue.AnchorPoint = Vector2.new(1, 0)
                SliderValue.BackgroundTransparency = 1
                SliderValue.Position = UDim2.new(1, -10, 0, 0)
                SliderValue.Size = UDim2.new(0, 40, 0, 25)
                SliderValue.Font = Enum.Font.Gotham
                SliderValue.Text = tostring(default)
                SliderValue.TextColor3 = Color3.fromRGB(255, 255, 255)
                SliderValue.TextSize = 14
                SliderValue.TextXAlignment = Enum.TextXAlignment.Right
                
                SliderBackground.Name = "SliderBackground"
                SliderBackground.Parent = Slider
                SliderBackground.AnchorPoint = Vector2.new(0.5, 1)
                SliderBackground.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
                SliderBackground.Position = UDim2.new(0.5, 0, 1, -10)
                SliderBackground.Size = UDim2.new(1, -20, 0, 6)
                
                SliderBackgroundUICorner.CornerRadius = UDim.new(1, 0)
                SliderBackgroundUICorner.Parent = SliderBackground
                
                SliderFill.Name = "SliderFill"
                SliderFill.Parent = SliderBackground
                SliderFill.BackgroundColor3 = Color3.fromRGB(65, 105, 225)
                SliderFill.Size = UDim2.new(0, 0, 1, 0)
                
                SliderFillUICorner.CornerRadius = UDim.new(1, 0)
                SliderFillUICorner.CornerRadius = UDim.new(1, 0)
                SliderFillUICorner.Parent = SliderFill
                
                SliderDrag.Name = "SliderDrag"
                SliderDrag.Parent = SliderBackground
                SliderDrag.BackgroundTransparency = 1
                SliderDrag.Size = UDim2.new(1, 0, 1, 0)
                SliderDrag.Font = Enum.Font.SourceSans
                SliderDrag.Text = ""
                SliderDrag.TextColor3 = Color3.fromRGB(0, 0, 0)
                SliderDrag.TextSize = 14
                
                -- Calculate initial position
                local function calculateValue(posX)
                    local relativeX = math.clamp(posX - SliderBackground.AbsolutePosition.X, 0, SliderBackground.AbsoluteSize.X)
                    local percent = relativeX / SliderBackground.AbsoluteSize.X
                    
                    local raw = min + (max - min) * percent
                    if increment then
                        raw = math.floor(raw / increment + 0.5) * increment
                    end
                    
                    return math.clamp(raw, min, max)
                end
                
                local function updateSlider(value)
                    local percent = (value - min) / (max - min)
                    SliderFill:TweenSize(UDim2.new(percent, 0, 1, 0), "Out", "Quad", 0.1, true)
                    SliderValue.Text = tostring(value)
                end
                
                -- Set initial value
                updateSlider(default)
                
                local isDragging = false
                
                connections[#connections+1] = SliderDrag.MouseButton1Down:Connect(function()
                    isDragging = true
                    
                    -- Update slider without lerp
                    local value = calculateValue(game:GetService("UserInputService"):GetMouseLocation().X)
                    updateSlider(value)
                    pcall(callback, value)
                end)
                
                connections[#connections+1] = game:GetService("UserInputService").InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        isDragging = false
                    end
                end)
                
                connections[#connections+1] = game:GetService("UserInputService").InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement and isDragging then
                        -- Update slider without lerp
                        local value = calculateValue(input.Position.X)
                        updateSlider(value)
                        pcall(callback, value)
                    end
                end)
                
                -- Slider hover effect
                connections[#connections+1] = SliderDrag.MouseEnter:Connect(function()
                    game:GetService("TweenService"):Create(Slider, TweenInfo.new(0.2), {
                        BackgroundColor3 = Color3.fromRGB(65, 65, 70)
                    }):Play()
                end)
                
                connections[#connections+1] = SliderDrag.MouseLeave:Connect(function()
                    game:GetService("TweenService"):Create(Slider, TweenInfo.new(0.2), {
                        BackgroundColor3 = Color3.fromRGB(55, 55, 60)
                    }):Play()
                end)
                
                local sliderObj = {}
                
                function sliderObj:SetValue(value)
                    value = math.clamp(value, min, max)
                    updateSlider(value)
                    pcall(callback, value)
                end
                
                function sliderObj:GetValue()
                    return tonumber(SliderValue.Text)
                end
                
                return sliderObj
            end
            
            -- Create a textbox
            function section:AddTextBox(boxText, placeholderText, defaultText, callback)
                placeholderText = placeholderText or "Enter text..."
                defaultText = defaultText or ""
                callback = callback or function() end
                
                local TextBox = Instance.new("Frame")
                local TextBoxUICorner = Instance.new("UICorner")
                local TextBoxText = Instance.new("TextLabel")
                local InputBox = Instance.new("TextBox")
                local InputBoxUICorner = Instance.new("UICorner")
                
                TextBox.Name = "TextBox_" .. boxText
                TextBox.Parent = SectionContent
                TextBox.BackgroundColor3 = Color3.fromRGB(55, 55, 60)
                TextBox.Size = UDim2.new(1, 0, 0, 50)
                
                TextBoxUICorner.CornerRadius = UDim.new(0, 4)
                TextBoxUICorner.Parent = TextBox
                
                TextBoxText.Name = "TextBoxText"
                TextBoxText.Parent = TextBox
                TextBoxText.BackgroundTransparency = 1
                TextBoxText.Position = UDim2.new(0, 10, 0, 0)
                TextBoxText.Size = UDim2.new(1, -20, 0, 25)
                TextBoxText.Font = Enum.Font.Gotham
                TextBoxText.Text = boxText
                TextBoxText.TextColor3 = Color3.fromRGB(255, 255, 255)
                TextBoxText.TextSize = 14
                TextBoxText.TextXAlignment = Enum.TextXAlignment.Left
                
                InputBox.Name = "InputBox"
                InputBox.Parent = TextBox
                InputBox.AnchorPoint = Vector2.new(0.5, 1)
                InputBox.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
                InputBox.Position = UDim2.new(0.5, 0, 1, -8)
                InputBox.Size = UDim2.new(1, -20, 0, 24)
                InputBox.Font = Enum.Font.Gotham
                InputBox.PlaceholderText = placeholderText
                InputBox.Text = defaultText
                InputBox.TextColor3 = Color3.fromRGB(255, 255, 255)
                InputBox.TextSize = 12
                InputBox.TextWrapped = true
                InputBox.ClearTextOnFocus = false
                
                InputBoxUICorner.CornerRadius = UDim.new(0, 4)
                InputBoxUICorner.Parent = InputBox
                
                -- TextBox events
                connections[#connections+1] = InputBox.Focused:Connect(function()
                    game:GetService("TweenService"):Create(InputBox, TweenInfo.new(0.2), {
                        BackgroundColor3 = Color3.fromRGB(50, 50, 55)
                    }):Play()
                end)
                
                connections[#connections+1] = InputBox.FocusLost:Connect(function(enterPressed)
                    game:GetService("TweenService"):Create(InputBox, TweenInfo.new(0.2), {
                        BackgroundColor3 = Color3.fromRGB(40, 40, 45)
                    }):Play()
                    
                    pcall(callback, InputBox.Text, enterPressed)
                end)
                
                -- TextBox hover effect
                connections[#connections+1] = InputBox.MouseEnter:Connect(function()
                    if not InputBox:IsFocused() then
                        game:GetService("TweenService"):Create(InputBox, TweenInfo.new(0.2), {
                            BackgroundColor3 = Color3.fromRGB(45, 45, 50)
                        }):Play()
                    end
                end)
                
                connections[#connections+1] = InputBox.MouseLeave:Connect(function()
                    if not InputBox:IsFocused() then
                        game:GetService("TweenService"):Create(InputBox, TweenInfo.new(0.2), {
                            BackgroundColor3 = Color3.fromRGB(40, 40, 45)
                        }):Play()
                    end
                end)
                
                local textBoxObj = {}
                
                function textBoxObj:SetText(text)
                    InputBox.Text = text
                    pcall(callback, text, false)
                end
                
                function textBoxObj:GetText()
                    return InputBox.Text
                end
                
                return textBoxObj
            end
            
            -- Create a label (text display)
            function section:AddLabel(labelText)
                local Label = Instance.new("Frame")
                local LabelUICorner = Instance.new("UICorner")
                local LabelText = Instance.new("TextLabel")
                
                Label.Name = "Label_" .. labelText:sub(1, 20)
                Label.Parent = SectionContent
                Label.BackgroundColor3 = Color3.fromRGB(55, 55, 60)
                Label.Size = UDim2.new(1, 0, 0, 36)
                
                LabelUICorner.CornerRadius = UDim.new(0, 4)
                LabelUICorner.Parent = Label
                
                LabelText.Name = "LabelText"
                LabelText.Parent = Label
                LabelText.BackgroundTransparency = 1
                LabelText.Position = UDim2.new(0, 10, 0, 0)
                LabelText.Size = UDim2.new(1, -20, 1, 0)
                LabelText.Font = Enum.Font.Gotham
                LabelText.Text = labelText
                LabelText.TextColor3 = Color3.fromRGB(200, 200, 200)
                LabelText.TextSize = 14
                LabelText.TextWrapped = true
                LabelText.TextXAlignment = Enum.TextXAlignment.Left
                
                local labelObj = {}
                
                function labelObj:SetText(text)
                    LabelText.Text = text
                end
                
                function labelObj:GetText()
                    return LabelText.Text
                end
                
                return labelObj
            end
            
            -- Create a key selector
            function section:AddKeySelector(selectorText, defaultKey, callback)
                defaultKey = defaultKey or Enum.KeyCode.Unknown
                callback = callback or function() end
                
                local KeySelector = Instance.new("Frame")
                local KeySelectorUICorner = Instance.new("UICorner")
                local KeySelectorText = Instance.new("TextLabel")
                local KeyButton = Instance.new("TextButton")
                local KeyButtonUICorner = Instance.new("UICorner")
                
                KeySelector.Name = "KeySelector_" .. selectorText
                KeySelector.Parent = SectionContent
                KeySelector.BackgroundColor3 = Color3.fromRGB(55, 55, 60)
                KeySelector.Size = UDim2.new(1, 0, 0, 36)
                
                KeySelectorUICorner.CornerRadius = UDim.new(0, 4)
                KeySelectorUICorner.Parent = KeySelector
                
                KeySelectorText.Name = "KeySelectorText"
                KeySelectorText.Parent = KeySelector
                KeySelectorText.BackgroundTransparency = 1
                KeySelectorText.Position = UDim2.new(0, 10, 0, 0)
                KeySelectorText.Size = UDim2.new(1, -110, 1, 0)
                KeySelectorText.Font = Enum.Font.Gotham
                KeySelectorText.Text = selectorText
                KeySelectorText.TextColor3 = Color3.fromRGB(255, 255, 255)
                KeySelectorText.TextSize = 14
                KeySelectorText.TextXAlignment = Enum.TextXAlignment.Left
                
                KeyButton.Name = "KeyButton"
                KeyButton.Parent = KeySelector
                KeyButton.AnchorPoint = Vector2.new(1, 0.5)
                KeyButton.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
                KeyButton.Position = UDim2.new(1, -10, 0.5, 0)
                KeyButton.Size = UDim2.new(0, 90, 0, 24)
                KeyButton.Font = Enum.Font.Gotham
                KeyButton.Text = defaultKey.Name
                KeyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                KeyButton.TextSize = 12
                
                KeyButtonUICorner.CornerRadius = UDim.new(0, 4)
                KeyButtonUICorner.Parent = KeyButton
                
                local listening = false
                local keySelected = defaultKey
                
                connections[#connections+1] = KeyButton.MouseButton1Click:Connect(function()
                    if listening then return end
                    
                    listening = true
                    KeyButton.Text = "..."
                    
                    local inputConnection
                    inputConnection = game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
                        if input.UserInputType == Enum.UserInputType.Keyboard then
                            keySelected = input.KeyCode
                            KeyButton.Text = input.KeyCode.Name
                            listening = false
                            
                            pcall(callback, input.KeyCode)
                            inputConnection:Disconnect()
                        end
                    end)
                end)
                
                -- KeySelector hover effect
                connections[#connections+1] = KeyButton.MouseEnter:Connect(function()
                    game:GetService("TweenService"):Create(KeyButton, TweenInfo.new(0.2), {
                        BackgroundColor3 = Color3.fromRGB(50, 50, 55)
                    }):Play()
                end)
                
                connections[#connections+1] = KeyButton.MouseLeave:Connect(function()
                    game:GetService("TweenService"):Create(KeyButton, TweenInfo.new(0.2), {
                        BackgroundColor3 = Color3.fromRGB(40, 40, 45)
                    }):Play()
                end)
                
                local keySelectorObj = {}
                
                function keySelectorObj:SetKey(key)
                    if typeof(key) == "EnumItem" and key.EnumType == Enum.KeyCode then
                        keySelected = key
                        KeyButton.Text = key.Name
                        pcall(callback, key)
                    end
                end
                
                function keySelectorObj:GetKey()
                    return keySelected
                end
                
                return keySelectorObj
            end
            
            -- Create a dropdown selector
            function section:AddDropdown(dropdownText, options, defaultOption, callback)
                options = options or {}
                defaultOption = defaultOption or options[1] or ""
                callback = callback or function() end
                
                local Dropdown = Instance.new("Frame")
                local DropdownUICorner = Instance.new("UICorner")
                local DropdownText = Instance.new("TextLabel")
                local DropdownButton = Instance.new("TextButton")
                local DropdownButtonUICorner = Instance.new("UICorner")
                local DropdownIcon = Instance.new("ImageLabel")
                local DropdownFrame = Instance.new("Frame")
                local DropdownFrameUICorner = Instance.new("UICorner")
                local DropdownList = Instance.new("ScrollingFrame")
                local DropdownListUIListLayout = Instance.new("UIListLayout")
                local DropdownFrameShadow = Instance.new("ImageLabel")
                
                Dropdown.Name = "Dropdown_" .. dropdownText
                Dropdown.Parent = SectionContent
                Dropdown.BackgroundColor3 = Color3.fromRGB(55, 55, 60)
                Dropdown.Size = UDim2.new(1, 0, 0, 36)
                
                DropdownUICorner.CornerRadius = UDim.new(0, 4)
                DropdownUICorner.Parent = Dropdown
                
                DropdownText.Name = "DropdownText"
                DropdownText.Parent = Dropdown
                DropdownText.BackgroundTransparency = 1
                DropdownText.Position = UDim2.new(0, 10, 0, 0)
                DropdownText.Size = UDim2.new(1, -110, 1, 0)
                DropdownText.Font = Enum.Font.Gotham
                DropdownText.Text = dropdownText
                DropdownText.TextColor3 = Color3.fromRGB(255, 255, 255)
                DropdownText.TextSize = 14
                DropdownText.TextXAlignment = Enum.TextXAlignment.Left
                
                DropdownButton.Name = "DropdownButton"
                DropdownButton.Parent = Dropdown
                DropdownButton.AnchorPoint = Vector2.new(1, 0.5)
                DropdownButton.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
                DropdownButton.Position = UDim2.new(1, -10, 0.5, 0)
                DropdownButton.Size = UDim2.new(0, 90, 0, 24)
                DropdownButton.Font = Enum.Font.Gotham
                DropdownButton.Text = defaultOption
                DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                DropdownButton.TextSize = 12
                
                DropdownButtonUICorner.CornerRadius = UDim.new(0, 4)
                DropdownButtonUICorner.Parent = DropdownButton
                
                DropdownIcon.Name = "DropdownIcon"
                DropdownIcon.Parent = DropdownButton
                DropdownIcon.AnchorPoint = Vector2.new(1, 0.5)
                DropdownIcon.BackgroundTransparency = 1
                DropdownIcon.Position = UDim2.new(1, -5, 0.5, 0)
                DropdownIcon.Size = UDim2.new(0, 12, 0, 12)
                DropdownIcon.Image = "rbxassetid://7072706318"
                DropdownIcon.ImageColor3 = Color3.fromRGB(200, 200, 200)
                
                DropdownFrame.Name = "DropdownFrame"
                DropdownFrame.Parent = Dropdown
                DropdownFrame.AnchorPoint = Vector2.new(0.5, 0)
                DropdownFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
                DropdownFrame.Position = UDim2.new(0.5, 0, 1, 5)
                DropdownFrame.Size = UDim2.new(1, -10, 0, 0)
                DropdownFrame.ClipsDescendants = true
                DropdownFrame.Visible = false
                DropdownFrame.ZIndex = 5
                
                DropdownFrameUICorner.CornerRadius = UDim.new(0, 4)
                DropdownFrameUICorner.Parent = DropdownFrame
                
                DropdownFrameShadow.Name = "DropdownFrameShadow"
                DropdownFrameShadow.Parent = DropdownFrame
                DropdownFrameShadow.AnchorPoint = Vector2.new(0.5, 0.5)
                DropdownFrameShadow.BackgroundTransparency = 1
                DropdownFrameShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
                DropdownFrameShadow.Size = UDim2.new(1, 30, 1, 30)
                DropdownFrameShadow.ZIndex = 4
                DropdownFrameShadow.Image = "rbxassetid://6014261993"
                DropdownFrameShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
                DropdownFrameShadow.ImageTransparency = 0.6
                DropdownFrameShadow.ScaleType = Enum.ScaleType.Slice
                DropdownFrameShadow.SliceCenter = Rect.new(49, 49, 450, 450)
                
                DropdownList.Name = "DropdownList"
                DropdownList.Parent = DropdownFrame
                DropdownList.BackgroundTransparency = 1
                DropdownList.Size = UDim2.new(1, 0, 1, 0)
                DropdownList.CanvasSize = UDim2.new(0, 0, 0, 0)
                DropdownList.ScrollBarThickness = 2
                DropdownList.ScrollBarImageColor3 = Color3.fromRGB(70, 70, 75)
                DropdownList.ZIndex = 5
                DropdownList.AutomaticCanvasSize = Enum.AutomaticSize.Y
                
                DropdownListUIListLayout.Name = "DropdownListUIListLayout"
                DropdownListUIListLayout.Parent = DropdownList
                DropdownListUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                DropdownListUIListLayout.Padding = UDim.new(0, 2)
                
                local isDropdownOpen = false
                local selectedOption = defaultOption
                
                -- Add options to dropdown
                for _, option in ipairs(options) do
                    local OptionButton = Instance.new("TextButton")
                    local OptionButtonUICorner = Instance.new("UICorner")
                    
                    OptionButton.Name = "Option_" .. option
                    OptionButton.Parent = DropdownList
                    OptionButton.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
                    OptionButton.Size = UDim2.new(1, 0, 0, 24)
                    OptionButton.Font = Enum.Font.Gotham
                    OptionButton.Text = option
                    OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                    OptionButton.TextSize = 12
                    OptionButton.ZIndex = 6
                    
                    OptionButtonUICorner.CornerRadius = UDim.new(0, 4)
                    OptionButtonUICorner.Parent = OptionButton
                    
                    -- Option hover effect
                    connections[#connections+1] = OptionButton.MouseEnter:Connect(function()
                        game:GetService("TweenService"):Create(OptionButton, TweenInfo.new(0.2), {
                            BackgroundColor3 = Color3.fromRGB(65, 65, 70)
                        }):Play()
                    end)
                    
                    connections[#connections+1] = OptionButton.MouseLeave:Connect(function()
                        game:GetService("TweenService"):Create(OptionButton, TweenInfo.new(0.2), {
                            BackgroundColor3 = Color3.fromRGB(50, 50, 55)
                        }):Play()
                    end)
                    
                    -- Option click handler
                    connections[#connections+1] = OptionButton.MouseButton1Click:Connect(function()
                        selectedOption = option
                        DropdownButton.Text = option
                        
                        -- Close dropdown
                        isDropdownOpen = false
                        game:GetService("TweenService"):Create(DropdownFrame, TweenInfo.new(0.2), {
                            Size = UDim2.new(1, -10, 0, 0)
                        }):Play()
                        game:GetService("TweenService"):Create(DropdownIcon, TweenInfo.new(0.2), {
                            Rotation = 0
                        }):Play()
                        task.delay(0.2, function()
                            DropdownFrame.Visible = false
                        end)
                        
                        pcall(callback, option)
                    end)
                end
                
                -- Dropdown button click handler
                connections[#connections+1] = DropdownButton.MouseButton1Click:Connect(function()
                    isDropdownOpen = not isDropdownOpen
                    
                    if isDropdownOpen then
                        -- Calculate dropdown height based on options (max 120)
                        local optionsHeight = math.min(#options * 26, 120)
                        
                        DropdownFrame.Visible = true
                        game:GetService("TweenService"):Create(DropdownFrame, TweenInfo.new(0.2), {
                            Size = UDim2.new(1, -10, 0, optionsHeight)
                        }):Play()
                        game:GetService("TweenService"):Create(DropdownIcon, TweenInfo.new(0.2), {
                            Rotation = 180
                        }):Play()
                    else
                        game:GetService("TweenService"):Create(DropdownFrame, TweenInfo.new(0.2), {
                            Size = UDim2.new(1, -10, 0, 0)
                        }):Play()
                        game:GetService("TweenService"):Create(DropdownIcon, TweenInfo.new(0.2), {
                            Rotation = 0
                        }):Play()
                        task.delay(0.2, function()
                            DropdownFrame.Visible = false
                        end)
                    end
                end)
                
                -- Close dropdown when clicking outside
                connections[#connections+1] = game:GetService("UserInputService").InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        local mousePosition = game:GetService("UserInputService"):GetMouseLocation()
                        if isDropdownOpen and not (DropdownFrame.AbsolutePosition.X <= mousePosition.X and 
                                                   mousePosition.X <= DropdownFrame.AbsolutePosition.X + DropdownFrame.AbsoluteSize.X and 
                                                   DropdownFrame.AbsolutePosition.Y <= mousePosition.Y and 
                                                   mousePosition.Y <= DropdownFrame.AbsolutePosition.Y + DropdownFrame.AbsoluteSize.Y) and
                                               not (DropdownButton.AbsolutePosition.X <= mousePosition.X and 
                                                   mousePosition.X <= DropdownButton.AbsolutePosition.X + DropdownButton.AbsoluteSize.X and 
                                                   DropdownButton.AbsolutePosition.Y <= mousePosition.Y and 
                                                   mousePosition.Y <= DropdownButton.AbsolutePosition.Y + DropdownButton.AbsoluteSize.Y) then
                            
                            isDropdownOpen = false
                            game:GetService("TweenService"):Create(DropdownFrame, TweenInfo.new(0.2), {
                                Size = UDim2.new(1, -10, 0, 0)
                            }):Play()
                            game:GetService("TweenService"):Create(DropdownIcon, TweenInfo.new(0.2), {
                                Rotation = 0
                            }):Play()
                            task.delay(0.2, function()
                                DropdownFrame.Visible = false
                            end)
                        end
                    end
                end)
                
                -- Dropdown hover effect
                connections[#connections+1] = DropdownButton.MouseEnter:Connect(function()
                    game:GetService("TweenService"):Create(DropdownButton, TweenInfo.new(0.2), {
                        BackgroundColor3 = Color3.fromRGB(50, 50, 55)
                    }):Play()
                end)
                
                connections[#connections+1] = DropdownButton.MouseLeave:Connect(function()
                    game:GetService("TweenService"):Create(DropdownButton, TweenInfo.new(0.2), {
                        BackgroundColor3 = Color3.fromRGB(40, 40, 45)
                    }):Play()
                end)
                
                local dropdownObj = {}
                
                function dropdownObj:SetOption(option)
                    if table.find(options, option) then
                        selectedOption = option
                        DropdownButton.Text = option
                        pcall(callback, option)
                    end
                end
                
                function dropdownObj:GetOption()
                    return selectedOption
                end
                
                function dropdownObj:RefreshOptions(newOptions)
                    options = newOptions
                    selectedOption = newOptions[1] or ""
                    DropdownButton.Text = selectedOption
                    
                    -- Clear old options
                    for _, child in pairs(DropdownList:GetChildren()) do
                        if child:IsA("TextButton") then
                            child:Destroy()
                        end
                    end
                    
                    -- Add new options
                    for _, option in ipairs(options) do
                        local OptionButton = Instance.new("TextButton")
                        local OptionButtonUICorner = Instance.new("UICorner")
                        
                        OptionButton.Name = "Option_" .. option
                        OptionButton.Parent = DropdownList
                        OptionButton.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
                        OptionButton.Size = UDim2.new(1, 0, 0, 24)
                        OptionButton.Font = Enum.Font.Gotham
                        OptionButton.Text = option
                        OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                        OptionButton.TextSize = 12
                        OptionButton.ZIndex = 6
                        
                        OptionButtonUICorner.CornerRadius = UDim.new(0, 4)
                        OptionButtonUICorner.Parent = OptionButton
                        
                        -- Option hover effect
                        connections[#connections+1] = OptionButton.MouseEnter:Connect(function()
                            game:GetService("TweenService"):Create(OptionButton, TweenInfo.new(0.2), {
                                BackgroundColor3 = Color3.fromRGB(65, 65, 70)
                            }):Play()
                        end)
                        
                        connections[#connections+1] = OptionButton.MouseLeave:Connect(function()
                            game:GetService("TweenService"):Create(OptionButton, TweenInfo.new(0.2), {
                                BackgroundColor3 = Color3.fromRGB(50, 50, 55)
                            }):Play()
                        end)
                        
                        -- Option click handler
                        connections[#connections+1] = OptionButton.MouseButton1Click:Connect(function()
                            selectedOption = option
                            DropdownButton.Text = option
                            
                            -- Close dropdown
                            isDropdownOpen = false
                            game:GetService("TweenService"):Create(DropdownFrame, TweenInfo.new(0.2), {
                                Size = UDim2.new(1, -10, 0, 0)
                            }):Play()
                            game:GetService("TweenService"):Create(DropdownIcon, TweenInfo.new(0.2), {
                                Rotation = 0
                            }):Play()
task.delay(0.2, function()
                                DropdownFrame.Visible = false
                            end)
                            
                            pcall(callback, option)
                        end)
                    end
                    
                    pcall(callback, selectedOption)
                end
                
                return dropdownObj
            end
            
            -- Create a color picker
            function section:AddColorPicker(pickerText, defaultColor, callback)
                defaultColor = defaultColor or Color3.fromRGB(255, 255, 255)
                callback = callback or function() end
                
                local ColorPicker = Instance.new("Frame")
                local ColorPickerUICorner = Instance.new("UICorner")
                local ColorPickerText = Instance.new("TextLabel")
                local ColorDisplay = Instance.new("Frame")
                local ColorDisplayUICorner = Instance.new("UICorner")
                local ColorPickerButton = Instance.new("TextButton")
                local ColorPickerFrame = Instance.new("Frame")
                local ColorPickerFrameUICorner = Instance.new("UICorner")
                local HueFrame = Instance.new("Frame")
                local HueFrameUICorner = Instance.new("UICorner")
                local HueSlider = Instance.new("ImageButton")
                local HueMarker = Instance.new("Frame")
                local HueMarkerUICorner = Instance.new("UICorner")
                local ColorFrame = Instance.new("Frame")
                local ColorFrameUICorner = Instance.new("UICorner")
                local ColorSelector = Instance.new("ImageButton")
                local ColorSelection = Instance.new("Frame")
                local ColorSelectionUICorner = Instance.new("UICorner")
                local RainbowToggle = Instance.new("TextButton")
                local RainbowToggleUICorner = Instance.new("UICorner")
                local RainbowText = Instance.new("TextLabel")
                local RainbowIndicator = Instance.new("Frame")
                local RainbowIndicatorUICorner = Instance.new("UICorner")
                local ColorPickerFrameShadow = Instance.new("ImageLabel")
                
                ColorPicker.Name = "ColorPicker_" .. pickerText
                ColorPicker.Parent = SectionContent
                ColorPicker.BackgroundColor3 = Color3.fromRGB(55, 55, 60)
                ColorPicker.Size = UDim2.new(1, 0, 0, 36)
                
                ColorPickerUICorner.CornerRadius = UDim.new(0, 4)
                ColorPickerUICorner.Parent = ColorPicker
                
                ColorPickerText.Name = "ColorPickerText"
                ColorPickerText.Parent = ColorPicker
                ColorPickerText.BackgroundTransparency = 1
                ColorPickerText.Position = UDim2.new(0, 10, 0, 0)
                ColorPickerText.Size = UDim2.new(1, -60, 1, 0)
                ColorPickerText.Font = Enum.Font.Gotham
                ColorPickerText.Text = pickerText
                ColorPickerText.TextColor3 = Color3.fromRGB(255, 255, 255)
                ColorPickerText.TextSize = 14
                ColorPickerText.TextXAlignment = Enum.TextXAlignment.Left
                
                ColorDisplay.Name = "ColorDisplay"
                ColorDisplay.Parent = ColorPicker
                ColorDisplay.AnchorPoint = Vector2.new(1, 0.5)
                ColorDisplay.BackgroundColor3 = defaultColor
                ColorDisplay.Position = UDim2.new(1, -10, 0.5, 0)
                ColorDisplay.Size = UDim2.new(0, 40, 0, 20)
                
                ColorDisplayUICorner.CornerRadius = UDim.new(0, 4)
                ColorDisplayUICorner.Parent = ColorDisplay
                
                ColorPickerButton.Name = "ColorPickerButton"
                ColorPickerButton.Parent = ColorPicker
                ColorPickerButton.BackgroundTransparency = 1
                ColorPickerButton.Size = UDim2.new(1, 0, 1, 0)
                ColorPickerButton.Font = Enum.Font.SourceSans
                ColorPickerButton.Text = ""
                ColorPickerButton.TextColor3 = Color3.fromRGB(0, 0, 0)
                ColorPickerButton.TextSize = 14
                
                ColorPickerFrame.Name = "ColorPickerFrame"
                ColorPickerFrame.Parent = ColorPicker
                ColorPickerFrame.AnchorPoint = Vector2.new(0.5, 0)
                ColorPickerFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
                ColorPickerFrame.Position = UDim2.new(0.5, 0, 1, 5)
                ColorPickerFrame.Size = UDim2.new(1, -10, 0, 0)
                ColorPickerFrame.ClipsDescendants = true
                ColorPickerFrame.Visible = false
                ColorPickerFrame.ZIndex = 5
                
                ColorPickerFrameShadow.Name = "ColorPickerFrameShadow"
                ColorPickerFrameShadow.Parent = ColorPickerFrame
                ColorPickerFrameShadow.AnchorPoint = Vector2.new(0.5, 0.5)
                ColorPickerFrameShadow.BackgroundTransparency = 1
                ColorPickerFrameShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
                ColorPickerFrameShadow.Size = UDim2.new(1, 30, 1, 30)
                ColorPickerFrameShadow.ZIndex = 4
                ColorPickerFrameShadow.Image = "rbxassetid://6014261993"
                ColorPickerFrameShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
                ColorPickerFrameShadow.ImageTransparency = 0.6
                ColorPickerFrameShadow.ScaleType = Enum.ScaleType.Slice
                ColorPickerFrameShadow.SliceCenter = Rect.new(49, 49, 450, 450)
                
                ColorPickerFrameUICorner.CornerRadius = UDim.new(0, 4)
                ColorPickerFrameUICorner.Parent = ColorPickerFrame
                
                HueFrame.Name = "HueFrame"
                HueFrame.Parent = ColorPickerFrame
                HueFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                HueFrame.Position = UDim2.new(0, 10, 0, 160)
                HueFrame.Size = UDim2.new(1, -20, 0, 20)
                HueFrame.ZIndex = 6
                
                HueFrameUICorner.CornerRadius = UDim.new(0, 4)
                HueFrameUICorner.Parent = HueFrame
                
                HueSlider.Name = "HueSlider"
                HueSlider.Parent = HueFrame
                HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                HueSlider.BackgroundTransparency = 1
                HueSlider.BorderSizePixel = 0
                HueSlider.Size = UDim2.new(1, 0, 1, 0)
                HueSlider.Image = "rbxassetid://3570695787"
                HueSlider.ScaleType = Enum.ScaleType.Slice
                HueSlider.SliceScale = 0.5
                HueSlider.ZIndex = 6
                
                HueMarker.Name = "HueMarker"
                HueMarker.Parent = HueSlider
                HueMarker.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                HueMarker.AnchorPoint = Vector2.new(0.5, 0.5)
                HueMarker.BorderSizePixel = 0
                HueMarker.Size = UDim2.new(0, 4, 1, 0)
                HueMarker.ZIndex = 7
                
                HueMarkerUICorner.CornerRadius = UDim.new(1, 0)
                HueMarkerUICorner.Parent = HueMarker
                
                ColorFrame.Name = "ColorFrame"
                ColorFrame.Parent = ColorPickerFrame
                ColorFrame.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                ColorFrame.Position = UDim2.new(0, 10, 0, 10)
                ColorFrame.Size = UDim2.new(1, -20, 0, 140)
                ColorFrame.ZIndex = 6
                
                ColorFrameUICorner.CornerRadius = UDim.new(0, 4)
                ColorFrameUICorner.Parent = ColorFrame
                
                ColorSelector.Name = "ColorSelector"
                ColorSelector.Parent = ColorFrame
                ColorSelector.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ColorSelector.BackgroundTransparency = 1
                ColorSelector.BorderSizePixel = 0
                ColorSelector.Size = UDim2.new(1, 0, 1, 0)
                ColorSelector.Image = "rbxassetid://4155801252"
                ColorSelector.ZIndex = 6
                
                ColorSelection.Name = "ColorSelection"
                ColorSelection.Parent = ColorSelector
                ColorSelection.AnchorPoint = Vector2.new(0.5, 0.5)
                ColorSelection.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ColorSelection.BorderSizePixel = 0
                ColorSelection.Size = UDim2.new(0, 10, 0, 10)
                ColorSelection.ZIndex = 7
                
                ColorSelectionUICorner.CornerRadius = UDim.new(1, 0)
                ColorSelectionUICorner.Parent = ColorSelection
                
                RainbowToggle.Name = "RainbowToggle"
                RainbowToggle.Parent = ColorPickerFrame
                RainbowToggle.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
                RainbowToggle.Position = UDim2.new(0, 10, 0, 190)
                RainbowToggle.Size = UDim2.new(1, -20, 0, 30)
                RainbowToggle.Font = Enum.Font.SourceSans
                RainbowToggle.Text = ""
                RainbowToggle.TextColor3 = Color3.fromRGB(0, 0, 0)
                RainbowToggle.TextSize = 14
                RainbowToggle.ZIndex = 6
                
                RainbowToggleUICorner.CornerRadius = UDim.new(0, 4)
                RainbowToggleUICorner.Parent = RainbowToggle
                
                RainbowText.Name = "RainbowText"
                RainbowText.Parent = RainbowToggle
                RainbowText.BackgroundTransparency = 1
                RainbowText.Position = UDim2.new(0, 10, 0, 0)
                RainbowText.Size = UDim2.new(0, 100, 1, 0)
                RainbowText.Font = Enum.Font.Gotham
                RainbowText.Text = "Rainbow"
                RainbowText.TextColor3 = Color3.fromRGB(255, 255, 255)
                RainbowText.TextSize = 14
                RainbowText.TextXAlignment = Enum.TextXAlignment.Left
                RainbowText.ZIndex = 6
                
                RainbowIndicator.Name = "RainbowIndicator"
                RainbowIndicator.Parent = RainbowToggle
                RainbowIndicator.AnchorPoint = Vector2.new(1, 0.5)
                RainbowIndicator.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
                RainbowIndicator.Position = UDim2.new(1, -10, 0.5, 0)
                RainbowIndicator.Size = UDim2.new(0, 40, 0, 20)
                RainbowIndicator.ZIndex = 6
                
                RainbowIndicatorUICorner.CornerRadius = UDim.new(0, 4)
                RainbowIndicatorUICorner.Parent = RainbowIndicator
                
                local isColorPickerOpen = false
                local isRainbowOn = false
                local rainbowLoop = nil
                
                -- Set default color
                local selectedColor = defaultColor
                local hue, saturation, value = 0, 0, 1
                local selectedH, selectedS, selectedV = 0, 0, 1
                
                -- Get hue from default color
                local defaultH, defaultS, defaultV = Color3.toHSV(defaultColor)
                selectedH = defaultH
                selectedS = defaultS
                selectedV = defaultV
                
                -- Update positions of markers
                local function updateColorDisplay()
                    ColorDisplay.BackgroundColor3 = selectedColor
                    ColorFrame.BackgroundColor3 = Color3.fromHSV(selectedH, 1, 1)
                    HueMarker.Position = UDim2.new(selectedH, 0, 0.5, 0)
                    ColorSelection.Position = UDim2.new(selectedS, 0, 1 - selectedV, 0)
                end
                
                updateColorDisplay()
                
                -- Color picker toggle
                connections[#connections+1] = ColorPickerButton.MouseButton1Click:Connect(function()
                    isColorPickerOpen = not isColorPickerOpen
                    
                    if isColorPickerOpen then
                        ColorPickerFrame.Visible = true
                        game:GetService("TweenService"):Create(ColorPickerFrame, TweenInfo.new(0.2), {
                            Size = UDim2.new(1, -10, 0, 230)
                        }):Play()
                    else
                        game:GetService("TweenService"):Create(ColorPickerFrame, TweenInfo.new(0.2), {
                            Size = UDim2.new(1, -10, 0, 0)
                        }):Play()
                        task.delay(0.2, function()
                            ColorPickerFrame.Visible = false
                        end)
                    end
                end)
                
                -- Hue slider drag
                local hueDragging = false
                
                connections[#connections+1] = HueSlider.MouseButton1Down:Connect(function()
                    hueDragging = true
                    
                    -- Update hue based on mouse position
                    local relativeX = math.clamp(game:GetService("UserInputService"):GetMouseLocation().X - HueSlider.AbsolutePosition.X, 0, HueSlider.AbsoluteSize.X)
                    selectedH = relativeX / HueSlider.AbsoluteSize.X
                    
                    -- Update color
                    selectedColor = Color3.fromHSV(selectedH, selectedS, selectedV)
                    ColorFrame.BackgroundColor3 = Color3.fromHSV(selectedH, 1, 1)
                    HueMarker.Position = UDim2.new(selectedH, 0, 0.5, 0)
                    ColorDisplay.BackgroundColor3 = selectedColor
                    
                    -- Trigger callback
                    pcall(callback, selectedColor)
                end)
                
                connections[#connections+1] = game:GetService("UserInputService").InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        hueDragging = false
                    end
                end)
                
                connections[#connections+1] = game:GetService("UserInputService").InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement and hueDragging then
                        -- Update hue based on mouse position
                        local relativeX = math.clamp(input.Position.X - HueSlider.AbsolutePosition.X, 0, HueSlider.AbsoluteSize.X)
                        selectedH = relativeX / HueSlider.AbsoluteSize.X
                        
                        -- Update color
                        selectedColor = Color3.fromHSV(selectedH, selectedS, selectedV)
                        ColorFrame.BackgroundColor3 = Color3.fromHSV(selectedH, 1, 1)
                        HueMarker.Position = UDim2.new(selectedH, 0, 0.5, 0)
                        ColorDisplay.BackgroundColor3 = selectedColor
                        
                        -- Trigger callback
                        pcall(callback, selectedColor)
                    end
                end)
                
                -- Color selector drag
                local colorDragging = false
                
                connections[#connections+1] = ColorSelector.MouseButton1Down:Connect(function()
                    colorDragging = true
                    
                    -- Update saturation and value based on mouse position
                    local relativeX = math.clamp(game:GetService("UserInputService"):GetMouseLocation().X - ColorSelector.AbsolutePosition.X, 0, ColorSelector.AbsoluteSize.X)
                    local relativeY = math.clamp(game:GetService("UserInputService"):GetMouseLocation().Y - ColorSelector.AbsolutePosition.Y, 0, ColorSelector.AbsoluteSize.Y)
                    
                    selectedS = relativeX / ColorSelector.AbsoluteSize.X
                    selectedV = 1 - (relativeY / ColorSelector.AbsoluteSize.Y)
                    
                    -- Update color
                    selectedColor = Color3.fromHSV(selectedH, selectedS, selectedV)
                    ColorSelection.Position = UDim2.new(selectedS, 0, 1 - selectedV, 0)
                    ColorDisplay.BackgroundColor3 = selectedColor
                    
                    -- Trigger callback
                    pcall(callback, selectedColor)
                end)
                
                connections[#connections+1] = game:GetService("UserInputService").InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        colorDragging = false
                    end
                end)
                
                connections[#connections+1] = game:GetService("UserInputService").InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement and colorDragging then
                        -- Update saturation and value based on mouse position
                        local relativeX = math.clamp(input.Position.X - ColorSelector.AbsolutePosition.X, 0, ColorSelector.AbsoluteSize.X)
                        local relativeY = math.clamp(input.Position.Y - ColorSelector.AbsolutePosition.Y, 0, ColorSelector.AbsoluteSize.Y)
                        
                        selectedS = relativeX / ColorSelector.AbsoluteSize.X
                        selectedV = 1 - (relativeY / ColorSelector.AbsoluteSize.Y)
                        
                        -- Update color
                        selectedColor = Color3.fromHSV(selectedH, selectedS, selectedV)
                        ColorSelection.Position = UDim2.new(selectedS, 0, 1 - selectedV, 0)
                        ColorDisplay.BackgroundColor3 = selectedColor
                        
                        -- Trigger callback
                        pcall(callback, selectedColor)
                    end
                end)
                
                -- Rainbow toggle
                connections[#connections+1] = RainbowToggle.MouseButton1Click:Connect(function()
                    isRainbowOn = not isRainbowOn
                    
                    if isRainbowOn then
                        -- Enable rainbow effect
                        RainbowIndicator.BackgroundColor3 = Color3.fromRGB(65, 105, 225)
                        
                        -- Start rainbow loop
                        if rainbowLoop then
                            rainbowLoop:Disconnect()
                        end
                        
                        local hueValue = 0
                        rainbowLoop = game:GetService("RunService").Heartbeat:Connect(function()
                            hueValue = (hueValue + 0.001) % 1
                            selectedH = hueValue
                            
                            -- Update color
                            selectedColor = Color3.fromHSV(selectedH, selectedS, selectedV)
                            ColorFrame.BackgroundColor3 = Color3.fromHSV(selectedH, 1, 1)
                            HueMarker.Position = UDim2.new(selectedH, 0, 0.5, 0)
                            ColorDisplay.BackgroundColor3 = selectedColor
                            
                            -- Trigger callback
                            pcall(callback, selectedColor)
                        end)
                    else
                        -- Disable rainbow effect
                        RainbowIndicator.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
                        
                        -- Stop rainbow loop
                        if rainbowLoop then
                            rainbowLoop:Disconnect()
                            rainbowLoop = nil
                        end
                    end
                end)
                
                -- Close color picker when clicking outside
                connections[#connections+1] = game:GetService("UserInputService").InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        local mousePosition = game:GetService("UserInputService"):GetMouseLocation()
                        if isColorPickerOpen and not (ColorPickerFrame.AbsolutePosition.X <= mousePosition.X and 
                                                      mousePosition.X <= ColorPickerFrame.AbsolutePosition.X + ColorPickerFrame.AbsoluteSize.X and 
                                                      ColorPickerFrame.AbsolutePosition.Y <= mousePosition.Y and 
                                                      mousePosition.Y <= ColorPickerFrame.AbsolutePosition.Y + ColorPickerFrame.AbsoluteSize.Y) and
                                                  not (ColorDisplay.AbsolutePosition.X <= mousePosition.X and 
                                                      mousePosition.X <= ColorDisplay.AbsolutePosition.X + ColorDisplay.AbsoluteSize.X and 
                                                      ColorDisplay.AbsolutePosition.Y <= mousePosition.Y and 
                                                      mousePosition.Y <= ColorDisplay.AbsolutePosition.Y + ColorDisplay.AbsoluteSize.Y) then
                            
                            isColorPickerOpen = false
                            game:GetService("TweenService"):Create(ColorPickerFrame, TweenInfo.new(0.2), {
                                Size = UDim2.new(1, -10, 0, 0)
                            }):Play()
                            task.delay(0.2, function()
                                ColorPickerFrame.Visible = false
                            end)
                        end
                    end
                end)
                
                -- Color picker hover effect
                connections[#connections+1] = ColorPicker.MouseEnter:Connect(function()
                    game:GetService("TweenService"):Create(ColorPicker, TweenInfo.new(0.2), {
                        BackgroundColor3 = Color3.fromRGB(65, 65, 70)
                    }):Play()
                end)
                
                connections[#connections+1] = ColorPicker.MouseLeave:Connect(function()
                    game:GetService("TweenService"):Create(ColorPicker, TweenInfo.new(0.2), {
                        BackgroundColor3 = Color3.fromRGB(55, 55, 60)
                    }):Play()
                end)
                
                local colorPickerObj = {}
                
                function colorPickerObj:SetColor(color)
                    if typeof(color) == "Color3" then
                        -- Stop rainbow if it's on
                        if isRainbowOn then
                            isRainbowOn = false
                            RainbowIndicator.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
                            
                            if rainbowLoop then
                                rainbowLoop:Disconnect()
                                rainbowLoop = nil
                            end
                        end
                        
                        -- Update color values
                        selectedColor = color
                        selectedH, selectedS, selectedV = Color3.toHSV(color)
                        
                        -- Update display
                        updateColorDisplay()
                        
                        -- Trigger callback
                        pcall(callback, selectedColor)
                    end
                end
                
                function colorPickerObj:GetColor()
                    return selectedColor
                end
                
                function colorPickerObj:ToggleRainbow(state)
                    if state ~= isRainbowOn then
                        RainbowToggle.MouseButton1Click:Fire()
                    end
                end
                
                function colorPickerObj:IsRainbow()
                    return isRainbowOn
                end
                
                return colorPickerObj
            end
            
            -- Return section object
            return section
        end
        
        -- Return tab object
        return tab
    end
    
    -- Return window object
    return window
end

-- Return library
return library

